# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import notify2
import time
import os
import re

from unicodedata import normalize

from PyQt5 import QtWidgets
from PyQt5 import QtCore
from PyQt5 import QtGui

from . import QtPtCore
from . import QtPtObjects
from . import QtPtWidgets

class QPentestToolApp(QtWidgets.QMainWindow):

    APP_TITLE = 'QtPentestTool'
    APP_ICON = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'Resources', 'QtPentestTool-icon-64.png'))
    APP_AUTHOR = '@v0nKrafft'
    APP_EMAIL = 'contact@vonkrafft.fr'
    APP_VERSION = '1.0'
    APP_SCANS_DIR = os.path.expanduser('~/.config/QtPentestTool/scans')
    APP_CONF_FILE = os.path.expanduser('~/.config/QtPentestTool/config.json')

    currentProj = None
    currentVuln = None
    
    def __init__(self, *argv, **kwargs):
        super(QPentestToolApp, self).__init__(*argv, **kwargs)

        self.settings = QtCore.QSettings('QtPentestTool', 'QtPtApp')

        self.settings.setValue('global/workdir', self.settings.value('global/workdir', QtCore.QDir.homePath()))
        self.settings.setValue('global/archive', self.settings.value('global/archive', 'tar'))
        self.settings.setValue('global/delay', self.settings.value('global/delay', 5))
        self.settings.setValue('global/cvss_version', self.settings.value('global/cvss_version', 3))

        self.statusBar()

        self.centralLayout = QtWidgets.QGridLayout()
        self.centralLayout.setRowStretch(2, 1)

        self.centralWidget = QtWidgets.QWidget(self)
        self.centralWidget.setLayout(self.centralLayout)
        self.setCentralWidget(self.centralWidget)

        self.titleWidget = QtPtWidgets.QTitleWidget(self)
        self.centralLayout.addWidget(self.titleWidget, 0, 0, 1, 2)

        self.projWidget = QtPtWidgets.QProjectWidget(self)
        self.centralLayout.addWidget(self.projWidget, 1, 0, 1, 1)

        self.projWidget.newClicked.connect(self.newProject)
        self.projWidget.editClicked.connect(self.editProject)
        self.projWidget.exportClicked.connect(self.exportProject)
        self.projWidget.screenshotClicked.connect(self.screenshotProject)
        self.projWidget.terminalClicked.connect(self.terminalProject)
        self.projWidget.targetTriggered.connect(self.openExternalUrl)

        self.navbarWidget = QtPtWidgets.QNavbarWidget(self)
        self.centralLayout.addWidget(self.navbarWidget, 2, 0, 1, 1)

        self.navbarWidget.currentItemChanged.connect(self.switchVulnerability)
        self.navbarWidget.currentItemUnset.connect(self.unsetVulnerability)
        self.navbarWidget.addClicked.connect(self.addVulnerability)
        self.navbarWidget.saveClicked.connect(self.saveVulnerability)
        self.navbarWidget.removeClicked.connect(self.removeVulnerability)

        self.vulnWidget = QtPtWidgets.QVulnerabilityWidget(self)
        self.centralLayout.addWidget(self.vulnWidget, 1, 1, 2, 1)

        self.vulnWidget.takeScreenshotClicked.connect(self.screenshotVulnerability)

        self.menubar = QtPtWidgets.QAppMenuBar(self)
        self.setMenuBar(self.menubar)

        self.menubar.newProjAct.triggered.connect(self.newProject)
        self.menubar.openProjAct.triggered.connect(self.openProject)
        self.menubar.editProjAct.triggered.connect(self.editProject)
        self.menubar.screenProjAct.triggered.connect(self.screenshotProject)
        self.menubar.scanProjAct.triggered.connect(self.scanOpenProject)
        self.menubar.folderProjAct.triggered.connect(self.folderOpenProject)
        self.menubar.refreshProjAct.triggered.connect(self.updateProject)
        self.menubar.exportProjAct.triggered.connect(self.exportProject)

        self.menubar.newVulnAct.triggered.connect(self.addVulnerability)
        self.menubar.saveVulnAct.triggered.connect(self.saveVulnerability)
        self.menubar.deleteVulnAct.triggered.connect(self.removeVulnerability)
        self.menubar.renameVulnAct.triggered.connect(self.renameVulnerability)
        self.menubar.screenVulnAct.triggered.connect(self.screenshotVulnerability)
        self.menubar.folderVulnAct.triggered.connect(self.folderOpenVulnerability)
        self.menubar.fileVulnAct.triggered.connect(self.fileOpenVulnerability)
        
        self.menubar.updateRecentMenu(QtPtObjects.QProject.enum(self.settings.value('global/workdir')))
        self.menubar.recentMenuTriggered.connect(self.openRecentProject)

        self.menubar.preferencesAct.triggered.connect(self.preferences)

        self.menubar.updateScanMenu(self.APP_SCANS_DIR, enabled=isinstance(self.currentProj, QtPtObjects.QProject))
        self.menubar.scanMenuTriggered.connect(self.runScan)
        self.menubar.folderScanAct.triggered.connect(self.openScanFolder)
        self.menubar.refreshScanAct.triggered.connect(self.refreshScanMenu)
        self.menubar.templateScanAct.triggered.connect(self.createScanTemplate)

        self.menubar.aboutAct.triggered.connect(self.about)
        self.menubar.aboutQtAct.triggered.connect(self.aboutQt)

        self.updateProject()

        self.resize(kwargs.get('width', 990), kwargs.get('height', 640))
        self.setWindowTitle(self.APP_TITLE)
        self.setWindowIcon(QtGui.QIcon(self.APP_ICON))
        self.show()

    def resizeEvent(self, event):
        self.projWidget.setMaximumWidth(max(380, int(0.2 * self.frameGeometry().width())))
        self.navbarWidget.setMaximumWidth(max(380, int(0.2 * self.frameGeometry().width())))
        return super(QPentestToolApp, self).resizeEvent(event)

    def notify(self, message, msecs = 5000):
        notify2.init(self.APP_TITLE)
        notice = notify2.Notification(self.APP_TITLE, message, self.APP_ICON)
        notice.set_timeout(int(msecs))
        notice.show()
        return notify2.uninit()

    def closeEvent(self, parent):
        self.writePreviousVulnerability()

    def about(self):
        QtWidgets.QMessageBox.about(self, 'About', f'{self.APP_TITLE} v{self.APP_VERSION}\n{self.APP_AUTHOR}\n{self.APP_EMAIL}')

    def aboutQt(self):
        QtWidgets.QMessageBox.aboutQt(self, 'About Qt')

    def preferences(self):
        dialog = QtPtWidgets.QSettingsDialog(self)
        settings, ok = dialog.openPreferences(self.APP_TITLE)
        if ok and isinstance(settings, QtCore.QSettings):
            self.settings = settings
            self.updateProject()

    def openExternalUrl(self, url):
        process = QtCore.QProcess(self)
        process.start('xdg-open', [url])

    # **************************************************************************
    # SCAN
    # **************************************************************************

    def runScan(self, path):
        dialog = QtPtWidgets.QScanDialog(self)
        command, ok = dialog.configureScan(path, self.currentProj, self.APP_TITLE)

        if ok is True:
            dialog = QtPtWidgets.QTerminalDialog(self)
            dialog.run(command, self.APP_TITLE)

        self.refreshScanMenu()

    def openScanFolder(self):
        process = QtCore.QProcess(self)
        process.start('xdg-open', [self.APP_SCANS_DIR])

    def createScanTemplate(self):
        dialog = QtPtWidgets.QScanTemplateDialog(self)
        if dialog.createTemplate(self.APP_SCANS_DIR, self.APP_TITLE) is True:
            self.refreshScanMenu()

    def refreshScanMenu(self):
        if isinstance(self.currentProj, QtPtObjects.QProject):
            self.menubar.updateScanMenu(self.APP_SCANS_DIR, self.currentProj.getScanDir(), enabled=True)
        else:
            self.menubar.updateScanMenu(self.APP_SCANS_DIR, enabled=False)

    # **************************************************************************
    # PROJECT
    # **************************************************************************

    def setProject(self, proj):
        self.currentProj = proj
        self.updateProject()

    def unsetProject(self):
        self.currentProj = None
        self.updateProject()

    def updateProject(self):
        self.titleWidget.setVisible(isinstance(self.currentProj, QtPtObjects.QProject))
        self.projWidget.setVisible(isinstance(self.currentProj, QtPtObjects.QProject))
        self.navbarWidget.setVisible(isinstance(self.currentProj, QtPtObjects.QProject))
        self.vulnWidget.setVisible(isinstance(self.currentVuln, QtPtObjects.QVulnerability))

        self.menubar.setEnableProjectActions(isinstance(self.currentProj, QtPtObjects.QProject))
        self.menubar.setEnableVulnerabilityActions(isinstance(self.currentVuln, QtPtObjects.QVulnerability))
        self.refreshScanMenu()

        if isinstance(self.currentVuln, QtPtObjects.QVulnerability):
            self.saveVulnerability()
        keptVuln = self.currentVuln

        if isinstance(self.currentProj, QtPtObjects.QProject):
            self.currentProj.loadVulnerabilities()
            self.titleWidget.setProject(self.currentProj)
            self.projWidget.setProject(self.currentProj)
            self.navbarWidget.setItems(self.currentProj.vulns)

        if isinstance(keptVuln, QtPtObjects.QVulnerability):
            self.navbarWidget.setCurrentItem(keptVuln)

        self.setWindowTitle('{name} ({client}) - {app}'.format(
            name=self.currentProj.get('name', 'Untitled project'), 
            client=self.currentProj.get('client', 'MISC'),
            app=self.APP_TITLE
        ) if isinstance(self.currentProj, QtPtObjects.QProject) else self.APP_TITLE)

    def exportProject(self):
        
        self.statusBar().showMessage('Exporting project ...', msecs=5000)
        self.notify('Exporting project ...')
        
        archive = self.currentProj.export(format=self.settings.value('global/archive'))

        if archive is None:
            self.statusBar().showMessage('Unable to export the project', msecs=5000)
            return

        self.statusBar().showMessage(f'The project has been exported to {archive}', msecs=5000)
        self.notify(f'The project has been exported to {archive}')

    def openProject(self):
        project, ok = QtPtWidgets.QProjectDialog.openProject(self.settings.value('global/workdir'), self.APP_TITLE, self)

        if ok and isinstance(project, QtPtObjects.QProject):
            self.setProject(project)
            self.statusBar().showMessage(f'Project loaded from {self.currentProj.database}', msecs=5000)

    def openRecentProject(self, folder):
        project, ok = QtPtWidgets.QProjectDialog.openRecentProject(folder, self.APP_TITLE, self)

        if ok and isinstance(project, QtPtObjects.QProject):
            self.setProject(project)
            self.statusBar().showMessage(f'Project loaded from {self.currentProj.database}', msecs=5000)

    def newProject(self):
        project, ok = QtPtWidgets.QProjectDialog.newProject(self.settings.value('global/workdir'), self.APP_TITLE, self)

        if ok and isinstance(project, QtPtObjects.QProject):
            self.setProject(project)
            self.menubar.updateRecentMenu(QtPtObjects.QProject.enum(self.settings.value('global/workdir')))
            self.statusBar().showMessage(f'Project created in {self.currentProj.database}', msecs=5000)

    def editProject(self):
        project, ok = QtPtWidgets.QProjectDialog.editProject(self.currentProj, self.APP_TITLE, self)

        if ok and isinstance(project, QtPtObjects.QProject):
            self.setProject(project)
            self.statusBar().showMessage(f'Project saved in {self.currentProj.database}', msecs=5000)

    def screenshotProject(self):
        if not os.path.isfile('/usr/bin/scrot'):
            self.statusBar().showMessage('Scrot is not installed!', msecs=5000)
            return

        self.statusBar().showMessage(f'A screenshot will be taken in {self.settings.value("global/delay")} seconds.', msecs=5000)

        time.sleep(int(self.settings.value('global/delay')))
        picture = self.currentProj.takeScreenshot()

        if picture is None:
            self.statusBar().showMessage('Unable to take a screenshot', msecs=5000)
            return notify2.uninit()

        picture = os.path.join(self.currentProj.basename(), self.currentProj.relpath(picture))
        self.statusBar().showMessage(f'Screenshot saved in {picture}', msecs=5000)
        self.notify(f'Screenshot saved in {picture}')

    def terminalProject(self):
        process = QtCore.QProcess(self)
        process.start('x-terminal-emulator', ['--workdir', self.currentProj.dirname(), '-e', f'script "{self.currentProj.newShellLogFilename()}"'])

    def folderOpenProject(self):
        process = QtCore.QProcess(self)
        process.start('xdg-open', [self.currentProj.dirname()])

    def scanOpenProject(self):
        process = QtCore.QProcess(self)
        process.start('xdg-open', [self.currentProj.getScanDir()])

    # **************************************************************************
    # VULNERABILITY
    # **************************************************************************

    def setVulnerability(self, vuln):
        self.currentVuln = vuln
        self.updateVulnerability()

    def unsetVulnerability(self):
        self.currentVuln = None
        self.updateVulnerability()

    def updateVulnerability(self):
        self.titleWidget.setVisible(isinstance(self.currentProj, QtPtObjects.QProject))
        self.projWidget.setVisible(isinstance(self.currentProj, QtPtObjects.QProject))
        self.navbarWidget.setVisible(isinstance(self.currentProj, QtPtObjects.QProject))
        self.vulnWidget.setVisible(isinstance(self.currentVuln, QtPtObjects.QVulnerability))

        self.menubar.setEnableProjectActions(isinstance(self.currentProj, QtPtObjects.QProject))
        self.menubar.setEnableVulnerabilityActions(isinstance(self.currentVuln, QtPtObjects.QVulnerability))
        self.refreshScanMenu()

        if isinstance(self.currentVuln, QtPtObjects.QVulnerability):
            self.vulnWidget.setVulnerability(self.currentVuln)

    def addVulnerability(self, placeholder = ''):
        self.writePreviousVulnerability()

        dialogBox = QtWidgets.QInputDialog(self)
        dialogBox.setInputMode(QtWidgets.QInputDialog.TextInput)
        dialogBox.setWindowTitle(f'New vulnerability - {self.APP_TITLE}')
        dialogBox.setLabelText('Provide the vulnerability name:')
        dialogBox.setTextValue(placeholder)
        dialogBox.resize(400, 10)

        if not dialogBox.exec_():
            return

        folder = normalize('NFD', dialogBox.textValue()).encode('ascii', 'ignore').decode('utf-8')
        folder = QtPtObjects.QVulnerability.sanitizeVulnerabilityFolder(folder)

        if len(folder) == 0:
            msg = 'The vulnerability\'s name cannot be empty and has to contain at least one word character (A-Za-z0-9 -).'
            answer = QtWidgets.QMessageBox.critical(self, 'Error', msg, QtWidgets.QMessageBox.Cancel | QtWidgets.QMessageBox.Retry)
            if answer == QtWidgets.QMessageBox.Retry:
                self.addVulnerability(dialogBox.textValue())
            return

        newVuln = QtPtObjects.QVulnerability(os.path.join(self.currentProj.getVulnerabilityDir(), folder), version=self.settings.value('global/cvss_version'))
        newVuln.set('Name', dialogBox.textValue())

        if not newVuln.create():
            msg = 'The vulnerability already exists, please choose an other name.'
            answer = QtWidgets.QMessageBox.warning(self, 'Warning', msg, QtWidgets.QMessageBox.Cancel | QtWidgets.QMessageBox.Retry)
            if answer == QtWidgets.QMessageBox.Retry:
                self.addVulnerability()
            return

        self.currentVuln = newVuln
        self.currentProj.loadVulnerabilities()
        self.titleWidget.setScore(self.currentProj.vulns)
        self.navbarWidget.setItems(self.currentProj.vulns, self.currentVuln)

        self.statusBar().showMessage(f'Vulnerability created in {self.currentVuln.database}', msecs=5000)

    def saveVulnerability(self, currentVuln = None):
        currentVuln = currentVuln or self.currentVuln

        currentVuln.set('Name', self.vulnWidget.nameInput.text())
        currentVuln.set('URL', self.vulnWidget.urlInput.text())
        currentVuln.set('Account', self.vulnWidget.accountInput.text())
        currentVuln.set('OWASP', self.vulnWidget.owaspInput.currentText())
        currentVuln.content = self.vulnWidget.contentInput.toPlainText()
        currentVuln.cvss = self.vulnWidget.cvssWidget.cvss()
        currentVuln.write()

        self.setVulnerability(currentVuln)
        self.currentProj.loadVulnerabilities()
        self.titleWidget.setScore(self.currentProj.vulns)
        self.navbarWidget.setItems(self.currentProj.vulns, self.currentVuln)

        self.statusBar().showMessage(f'Vulnerability saved in {currentVuln.database}', msecs=5000)

    def removeVulnerability(self, currentVuln = None):
        currentVuln = currentVuln or self.currentVuln

        msg = 'Any deletion is final. Are you sure you want to remove the vulnerability?'
        answer = QtWidgets.QMessageBox.question(self, 'Confirm ?', msg, QtWidgets.QMessageBox.Abort | QtWidgets.QMessageBox.Yes)
        if answer != QtWidgets.QMessageBox.Yes:
            return

        if not currentVuln.delete():
            msg = 'An error occurred while removing the vulnerability. Please try again later.'
            answer = QtWidgets.QMessageBox.critical(self, 'Error', msg, QtWidgets.QMessageBox.Ok)
            return

        self.currentVuln = None
        self.currentProj.loadVulnerabilities()
        self.titleWidget.setScore(self.currentProj.vulns)
        self.navbarWidget.setItems(self.currentProj.vulns)

        self.statusBar().showMessage('Vulnerability deleted', msecs=5000)

    def switchVulnerability(self, currentVuln = None):
        currentVuln = currentVuln or self.currentVuln

        self.writePreviousVulnerability()

        dirname = self.currentProj.sanitizeVulnerabilityPath(currentVuln.dirname())
        if QtPtObjects.QVulnerability.isVulnerability(dirname):
            self.setVulnerability(QtPtObjects.QVulnerability(dirname).read())

    def renameVulnerability(self, currentVuln = None):
        currentVuln = currentVuln or self.currentVuln

        self.currentVuln.write()
        self.statusBar().showMessage(f'Vulnerability saved in {self.currentVuln.database}', msecs=5000)

        folder = normalize('NFD', self.currentVuln.get('name')).encode('ascii', 'ignore').decode('utf-8')
        folder = QtPtObjects.QVulnerability.sanitizeVulnerabilityFolder(folder)

        if len(folder) == 0:
            msg = 'The vulnerability\'s name cannot be empty and has to contain at least one word character (A-Za-z0-9 -).'
            answer = QtWidgets.QMessageBox.critical(self, 'Error', msg, QtWidgets.QMessageBox.Ok)
            return

        if not self.currentVuln.rename(folder):
            msg = 'The vulnerability already exists, please choose an other name.'
            answer = QtWidgets.QMessageBox.warning(self, 'Warning', msg, QtWidgets.QMessageBox.Ok)
            return

        self.setVulnerability(self.currentVuln)
        self.currentProj.loadVulnerabilities()
        self.titleWidget.setScore(self.currentProj.vulns)
        self.navbarWidget.setItems(self.currentProj.vulns, self.currentVuln)

        self.statusBar().showMessage(f'Vulnerability moved in {self.currentVuln.database}', msecs=5000)

    def writePreviousVulnerability(self):
        previousVuln = self.vulnWidget.saveCurrentVulnerability()
        if previousVuln is not None:
            self.currentProj.loadVulnerabilities()
            self.titleWidget.setScore(self.currentProj.vulns)
            self.navbarWidget.updateItem(previousVuln)
            self.statusBar().showMessage(f'Vulnerability saved in {previousVuln.database}', msecs=5000)

        return previousVuln

    def screenshotVulnerability(self):
        if not os.path.isfile('/usr/bin/scrot'):
            self.statusBar().showMessage('Scrot is not installed!', msecs=5000)
            return

        self.statusBar().showMessage(f'A screenshot will be taken in {self.settings.value("global/delay")} seconds.', msecs=5000)

        time.sleep(int(self.settings.value('global/delay')))
        picture = self.currentVuln.takeScreenshot()

        if picture is None:
            self.statusBar().showMessage('Unable to take a screenshot', msecs=5000)
            return notify2.uninit()

        picture = os.path.join(self.currentVuln.basename(), self.currentVuln.relpath(picture))
        self.statusBar().showMessage(f'Screenshot saved in {picture}', msecs=5000)
        self.notify(f'Screenshot saved in {picture}')

        time.sleep(0.5)
        self.updateVulnerability()

    def folderOpenVulnerability(self):
        process = QtCore.QProcess(self)
        process.start('xdg-open', [self.currentVuln.dirname()])

    def fileOpenVulnerability(self):
        process = QtCore.QProcess(self)
        process.start('xdg-open', [self.currentVuln.database])
