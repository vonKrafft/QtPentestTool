# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtCore
from .. import QtPtObjects

import re

class QNavbarItemWidget(QtWidgets.QWidget):
    """docstring for QNavbarItemWidget"""

    def __init__(self, vulnerability = None, *args, **kwargs):
        super(QNavbarItemWidget, self).__init__(*args, **kwargs)

        self.layout = QtWidgets.QHBoxLayout()
        self.setLayout(self.layout)

        # Badge

        self.badgeLabel = QtWidgets.QLabel(self)
        self.badgeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.badgeLabel.setMinimumWidth(80)
        self.badgeLabel.setStyleSheet('''
            QLabel {{
                padding: .25em .5em;
                border-radius: 2px;
                color: #fff;
                background: {};
            }}
            QLabel#critical {{
                background: {};
            }}
            QLabel#high {{
                background: {};
            }}
            QLabel#medium {{
                background: {};
            }}
            QLabel#low {{
                background: {};
            }}
            QLabel#none {{
                background: {};
            }}
        '''.format(
            QtPtCore.QtPt.DefaultColor, 
            QtPtCore.QtPt.CriticalColor, 
            QtPtCore.QtPt.HighColor, 
            QtPtCore.QtPt.MediumColor, 
            QtPtCore.QtPt.LowColor, 
            QtPtCore.QtPt.NoneColor
        ))

        # Text

        self.textLayout = QtWidgets.QVBoxLayout()
        self.textLayout.setContentsMargins(0, 0, 0, 0)
        self.textLayout.setSpacing(0)

        self.textWidget = QtWidgets.QWidget()
        self.textWidget.setLayout(self.textLayout)

        self.titleLabel = QtWidgets.QLabel(self)
        self.titleLabel.setFont(QtGui.QFont('SansSerif', weight=QtGui.QFont.Bold))
        self.titleLabel.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignBottom)
        self.textLayout.addWidget(self.titleLabel)

        self.extraLabel = QtWidgets.QLabel(self)
        self.extraLabel.setFont(QtGui.QFont('SansSerif', 8, italic=True))
        self.extraLabel.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.textLayout.addWidget(self.extraLabel)

        # QNavbarItemWidget

        self.layout.addWidget(self.badgeLabel, 0)
        self.layout.addWidget(self.textWidget, 1)

        # Display data

        self.setVulnerability(vulnerability)

    def getVulnerability(self):
        return getattr(self, 'vuln', None)

    def setVulnerability(self, vulnerability = None):
        vulnerability = vulnerability or QtPtObjects.QVulnerability()

        self.vuln = vulnerability

        self.setTitle(self.vuln.get('name', 'Unknown vulnerability'))

        owasp = self.vuln.get('owasp', None)
        url = '<a href="{link}">{link}</a>'.format(link=self.vuln.get('url')) if self.vuln.get('url', '').startswith('http') else self.vuln.get('url', None)
        self.setExtra('{} / {}'.format(owasp, url) if owasp and url else '{}{}'.format(owasp, url))

        self.setBadge(self.vuln.cvss.rating())

    def setBadge(self, text):
        self.badgeLabel.setText(str(text or QtPtCore.QtPt.DefaultRating))
        self.badgeLabel.setObjectName(re.sub(r'[^a-z0-9]+', '', str(text or QtPtCore.QtPt.DefaultRating).lower()))
        self.badgeLabel.setStyleSheet(self.badgeLabel.styleSheet())
        self.badgeLabel.update()

    def setTitle(self, text):
        self.titleLabel.setText(str(text or ''))

    def setExtra(self, text):
        self.extraLabel.setText(str(text or ''))