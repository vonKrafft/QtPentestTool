# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtCore
from .. import QtPtObjects

import re # PyQt5.QtCore.QRegExp has no replace method, thus "re" is needed

class QNavbarItemWidget(QtWidgets.QWidget):
    """Navbar item widget for QtPentestTool.

    Attributes:
        _vuln (QtPtObjects.QVulnerability): Vulnerability object linked to the widget

        layout (QtWidgets.QHBoxLayout): Current widget's layout

        badgeLabel (QtWidgets.QLabel)
        textLayout (QtWidgets.QVBoxLayout)
        textWidget (QtWidgets.QWidget)
        titleLabel (QtWidgets.QLabel)
        extraLabel (QtWidgets.QLabel)

    """

    def __init__(self, vulnerability: 'QtPtObjects.QVulnerability' = None, *args, **kwargs) -> None:
        """ Class constructor.

        Args:
            vulnerability (QtPtObjects.QVulnerability, optional): Vulnerability object linked to the widget (default None)
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        """
        super(QNavbarItemWidget, self).__init__(*args, **kwargs)

        self.layout = QtWidgets.QHBoxLayout()
        self.setLayout(self.layout)
        self.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.__ctxVulnItemMenu)

        # Badge

        self.badgeLabel = QtWidgets.QLabel(self)
        self.badgeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.badgeLabel.setMinimumWidth(80)
        self.badgeLabel.setStyleSheet(
            'QLabel { padding: .25em .5em; border-radius: 2px; color: #fff; }'
            f'QLabel {{ background: {QtPtCore.QtPt.DefaultColor}; }}'
            f'QLabel#critical {{ background: {QtPtCore.QtPt.CriticalColor}; }}'
            f'QLabel#high {{ background: {QtPtCore.QtPt.HighColor}; }}'
            f'QLabel#medium {{ background: {QtPtCore.QtPt.MediumColor}; }}'
            f'QLabel#low {{ background: {QtPtCore.QtPt.LowColor}; }}'
            f'QLabel#none {{ background: {QtPtCore.QtPt.NoneColor}; }}'
        )

        # Text

        self.textLayout = QtWidgets.QVBoxLayout()
        self.textLayout.setContentsMargins(0, 0, 0, 0)
        self.textLayout.setSpacing(0)

        self.textWidget = QtWidgets.QWidget()
        self.textWidget.setLayout(self.textLayout)

        self.titleLabel = QtWidgets.QLabel(self)
        self.titleLabel.setFont(QtGui.QFont('SansSerif', weight=QtGui.QFont.Bold))
        self.titleLabel.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignBottom)
        self.textLayout.addWidget(self.titleLabel)

        self.extraLabel = QtWidgets.QLabel(self)
        self.extraLabel.setFont(QtGui.QFont('SansSerif', 8, italic=True))
        self.extraLabel.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.textLayout.addWidget(self.extraLabel)

        # QNavbarItemWidget

        self.layout.addWidget(self.badgeLabel, 0)
        self.layout.addWidget(self.textWidget, 1)

        # Display data

        self.setVulnerability(vulnerability)

    def getVulnerability(self) -> 'QtPtObjects.QVulnerability':
        """ Getter for the vulnerability object linked to the widget.

        Returns:
            QtPtObjects.QVulnerability: The current vulnerability object

        """
        return getattr(self, '_vuln', None)

    def setVulnerability(self, vulnerability: 'QtPtObjects.QVulnerability' = None) -> None:
        """ Setter for the vulnerability object linked to the widget. If the 
        provided vulnerability is None, an empty vulnerability object will be 
        created an linked to the widget.

        Args:
            cvss (QtPtObjects.QVulnerability, optional): The vulnerability object to set (default None)

        """
        vulnerability = vulnerability or QtPtObjects.QVulnerability()

        self._vuln = vulnerability

        self.setTitle(self._vuln.get('name', 'Unknown vulnerability'))

        owasp = self._vuln.get('owasp', None)
        url = f'<a href="{self._vuln.get("url")}">{self._vuln.get("url")}</a>' if self._vuln.get('url', '').startswith('http') else self._vuln.get('url', None)
        self.setExtra(f'{owasp} / {url}' if owasp and url else f'{owasp}{url}')

        self.setBadge(self._vuln.cvss().rating())

    def setBadge(self, rating: 'QtPtCore.QCvssRating') -> None:
        """ Set the current item's badge with the given value.

        Args:
            rating (QtPtCore.QCvssRating): The value to set

        """
        self.badgeLabel.setText(str(rating or QtPtCore.QtPt.DefaultRating))
        self.badgeLabel.setObjectName(re.sub(r'[^a-z0-9]+', '', str(rating or QtPtCore.QtPt.DefaultRating).lower()))
        self.badgeLabel.setStyleSheet(self.badgeLabel.styleSheet())
        self.badgeLabel.update()

    def setTitle(self, title: str) -> None:
        """ Set the current item's badge with the given value.

        Args:
            title (str): The value to set

        """
        self.titleLabel.setText(str(title or ''))

    def setExtra(self, metadata: str) -> None:
        """ Set the current item's badge with the given value.

        Args:
            metadata (str): The value to set

        """
        self.extraLabel.setText(str(metadata or ''))

    def __ctxVulnItemMenu(self, pos: 'QtCore.QPoint') -> None:
        """ Custom context menu created for the current widget

        Args:
            pos (QtCore.QPoint): The cursor position when the context menu is triggered

        """
        cmenu = QtWidgets.QMenu(self.sender())

        copyAct = cmenu.addAction(QtGui.QIcon.fromTheme('edit-copy'), 'Copy vulnerability\'s title')
        copyAct.triggered.connect(lambda: QtWidgets.QApplication.clipboard().setText(self._vuln.get('name', 'Unknown vulnerability')))

        cmenu.addSeparator()

        folderAct = cmenu.addAction(QtGui.QIcon.fromTheme('document-open'), 'Open containing folder')
        folderAct.triggered.connect(lambda: QtCore.QProcess(self).start('xdg-open', [self._vuln.dirname()]))

        fileAct = cmenu.addAction(QtGui.QIcon.fromTheme('document-new'), 'Open associated file')
        fileAct.triggered.connect(lambda: QtCore.QProcess(self).start('xdg-open', [self._vuln.database]))

        cmenu.exec_(self.sender().mapToGlobal(pos))