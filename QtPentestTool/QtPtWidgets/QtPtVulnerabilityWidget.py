# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtCore
from .. import QtPtObjects
from .. import QtPtWidgets


class QVulnerabilityWidget(QtWidgets.QGroupBox):
    """docstring for QVulnerabilityWidget"""

    takeScreenshotClicked = QtCore.pyqtSignal()

    _vulnerability = None
    _isEdited = False

    def __init__(self, *args, **kwargs):
        super(QVulnerabilityWidget, self).__init__(*args, **kwargs)

        self.layout = QtWidgets.QVBoxLayout()
        self.setLayout(self.layout)

        # Header

        self.headerLayout = QtWidgets.QGridLayout()
        self.headerLayout.setContentsMargins(0, 0, 0, 0)
        self.headerLayout.setColumnStretch(1, 1)

        self.headerWidget = QtWidgets.QWidget(objectName='headerVulnerabilityWidget')
        self.headerWidget.setLayout(self.headerLayout)

        self.titleLabel = QtWidgets.QLabel(self)
        self.titleLabel.setFont(QtGui.QFont('SansSerif', 16))
        self.titleLabel.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.titleLabel.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.titleLabel.customContextMenuRequested.connect(self.__ctxTitleLabelMenu)
        self.headerLayout.addWidget(self.titleLabel, 0, 0, 1, 2)

        self.badgeLabel = QtWidgets.QLabel('{} ({})'.format(QtPtObjects.QCvss().rating(), QtPtObjects.QCvss().score()), self)
        self.badgeLabel.setFont(QtGui.QFont('SansSerif', 10, QtGui.QFont.Bold))
        self.badgeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.badgeLabel.setStyleSheet(self.__badgeStyleSheet(QtPtCore.QtPt.DefaultColor))
        self.badgeLabel.setMinimumWidth(150)
        self.headerLayout.addWidget(self.badgeLabel, 0, 2)

        # Body

        self.bodyLayout = QtWidgets.QVBoxLayout()
        self.bodyLayout.setContentsMargins(0, 0, 0, 0)

        self.bodyWidget = QtWidgets.QWidget(objectName='bodyVulnerabilityWidget')
        self.bodyWidget.setLayout(self.bodyLayout)
        
        self.vulnLayout = QtWidgets.QFormLayout()
        self.vulnLayout.setContentsMargins(0, 0, 0, 0)
        self.vulnLayout.setLabelAlignment(QtCore.Qt.AlignLeft)

        self.vulnWidget = QtWidgets.QWidget()
        self.vulnWidget.setLayout(self.vulnLayout)

        self.scoreLabel = QtWidgets.QLabel('CVSS', self)
        self.scoreInput = QtWidgets.QLineEdit(self, readOnly=True)
        self.vulnLayout.addRow(self.scoreLabel, self.scoreInput)

        self.cvssWidget = QtPtWidgets.QCvssWidget()
        self.cvssWidget.triggered.connect(self.__updateCvss)
        self.vulnLayout.addRow(self.cvssWidget)

        self.nameLabel = QtWidgets.QLabel('Name', self)
        self.nameInput = QtWidgets.QLineEdit(self)
        self.nameInput.textChanged[str].connect(self.__updateTitle)
        self.vulnLayout.addRow(self.nameLabel, self.nameInput)

        self.urlLabel = QtWidgets.QLabel('URL', self)
        self.urlInput = QtWidgets.QLineEdit(self)
        self.urlInput.textChanged[str].connect(self.__triggerEdited)
        self.vulnLayout.addRow(self.urlLabel, self.urlInput)

        self.accountLabel = QtWidgets.QLabel('Account', self)
        self.accountInput = QtWidgets.QLineEdit(self)
        self.accountInput.textChanged[str].connect(self.__triggerEdited)
        self.vulnLayout.addRow(self.accountLabel, self.accountInput)

        self.owaspLabel = QtWidgets.QLabel('OWASP', self)
        self.owaspInput = QtWidgets.QComboBox(self)
        self.owaspInput.setFocusPolicy(QtCore.Qt.NoFocus)
        self.owaspInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.owaspInput.addItems(QtPtObjects.QVulnerability.OWASP)
        self.owaspInput.setCurrentIndex(-1)
        self.owaspInput.activated[str].connect(self.__triggerEdited)
        self.vulnLayout.addRow(self.owaspLabel, self.owaspInput)

        self.contentInput = QtWidgets.QTextEdit(self)
        self.contentInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.accountInput.textChanged.connect(self.__triggerEdited)

        self.bodyLayout.addWidget(self.vulnWidget, 0)
        self.bodyLayout.addWidget(self.contentInput, 1)

        # Footer

        self.footerLayout = QtWidgets.QGridLayout()
        self.footerLayout.setContentsMargins(0, 0, 0, 0)
        self.footerLayout.setColumnStretch(1, 1)

        self.footerWidget = QtWidgets.QWidget(objectName='vulnFooterWidget')
        self.footerWidget.setLayout(self.footerLayout)
        self.footerWidget.setMaximumHeight(100)

        self.screenshotButton = QtWidgets.QPushButton(QtGui.QIcon.fromTheme('insert-image'), 'Take a screenshot\n(0 taken)', self)
        self.screenshotButton.clicked[bool].connect(self.__takeScreenshot)
        self.screenshotButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.screenshotButton.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        self.screenshotButton.setMinimumHeight(100)
        self.screenshotButton.setMinimumWidth(100)
        self.footerLayout.addWidget(self.screenshotButton, 0, 0)

        self.screenshotsLayout = QtWidgets.QGridLayout()
        self.screenshotsLayout.setContentsMargins(0, 0, 0, 0)

        self.screenshotsWidget = QtWidgets.QWidget()
        self.screenshotsWidget.setLayout(self.screenshotsLayout)
        self.screenshotsWidget.setMaximumHeight(75)

        self.screenshotsScrollArea = QtWidgets.QScrollArea()
        self.screenshotsScrollArea.setWidgetResizable(True)
        self.screenshotsScrollArea.setMinimumHeight(100)
        self.screenshotsScrollArea.setFocusPolicy(QtCore.Qt.NoFocus)
        self.screenshotsScrollArea.setStyleSheet('QScrollArea { border: none }')
        self.screenshotsScrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.screenshotsScrollArea.setWidget(self.screenshotsWidget)
        self.footerLayout.addWidget(self.screenshotsScrollArea, 0, 1)

        # QVulnerabilityWidget

        self.layout.addWidget(self.headerWidget, 0)
        self.layout.addWidget(self.bodyWidget, 1)
        self.layout.addWidget(self.footerWidget, 0)

    def __ctxTitleLabelMenu(self, pos):
        cmenu = QtWidgets.QMenu(self.sender())

        copyAct = cmenu.addAction(QtGui.QIcon.fromTheme('edit-copy'), 'Copy vulnerability\'s title')
        copyAct.triggered.connect(lambda: QtWidgets.QApplication.clipboard().setText(self.titleLabel.text()))

        cmenu.addSeparator()

        folderAct = cmenu.addAction(QtGui.QIcon.fromTheme('document-open'), 'Open containing folder')
        folderAct.triggered.connect(lambda: QtCore.QProcess(self).start('xdg-open', [self._vulnerability.dirname()]))

        fileAct = cmenu.addAction(QtGui.QIcon.fromTheme('document-new'), 'Open associated file')
        fileAct.triggered.connect(lambda: QtCore.QProcess(self).start('xdg-open', [self._vulnerability.database]))

        cmenu.exec_(self.sender().mapToGlobal(pos))

    def setVisible(self, visible = True):
        self.headerWidget.setVisible(visible)
        self.bodyWidget.setVisible(visible)
        self.footerWidget.setVisible(visible)
        super(QVulnerabilityWidget, self).setVisible(True)

    def setVulnerability(self, vulnerability, *args, **kwargs):
        self.titleLabel.setText(vulnerability.get('name', '#VALUE!'))

        self.badgeLabel.setText('{} ({})'.format(vulnerability.cvss.rating(), vulnerability.cvss.score()))
        self.badgeLabel.setStyleSheet(self.__badgeStyleSheet(vulnerability.cvss.color()))

        self.cvssWidget.setCvss(vulnerability.cvss)
        self.scoreLabel.setText('CVSS v{}'.format(vulnerability.cvss.version))
        self.scoreInput.setText(str(vulnerability.cvss))

        self.nameInput.setText(vulnerability.get('name', ''))
        self.urlInput.setText(vulnerability.get('url', ''))
        self.accountInput.setText(vulnerability.get('account', ''))
        self.owaspInput.setCurrentIndex(self.owaspInput.findText(vulnerability.get('owasp', '')))

        self.contentInput.setText(vulnerability.content)

        self.screenshotButton.setText('Take a screenshot\n({} taken)'.format(vulnerability.countScreenshots()))

        for i in reversed(range(self.screenshotsLayout.count())):
            self.screenshotsLayout.itemAt(i).widget().setParent(None)

        for column, picture in enumerate(vulnerability.getScreenshotsList()):
            self.screenshotsLayout.addWidget(QtPtWidgets.QScreenshotLabel(vulnerability.sanitizeScreenshotPath(picture), self), 0, column)
            self.screenshotsLayout.setColumnStretch(column, 0)

        self.screenshotsWidget.resize(100*len(vulnerability.getScreenshotsList()), 100)
        self.screenshotsLayout.setColumnStretch(len(vulnerability.getScreenshotsList()), 1)

        self._vulnerability = vulnerability
        self._isEdited = bool(kwargs.get('edited', False))

    def saveCurrentVulnerability(self):
        if self.isEdited() and isinstance(self._vulnerability, QtPtObjects.QVulnerability):
            self._vulnerability.set('Name', self.nameInput.text())
            self._vulnerability.set('URL', self.urlInput.text())
            self._vulnerability.set('Account', self.accountInput.text())
            self._vulnerability.set('OWASP', self.owaspInput.currentText())
            self._vulnerability.content = self.contentInput.toPlainText()
            self._vulnerability.cvss = self.cvssWidget.cvss()
            self._vulnerability.write()
            self._isEdited = False
            return self._vulnerability
        return None

    def isEdited(self):
        return bool(self._isEdited)

    def __takeScreenshot(self):
        self.takeScreenshotClicked.emit()

    def __updateTitle(self):
        self.titleLabel.setText(self.nameInput.text() if len(self.nameInput.text()) > 0 else '#VALUE!')
        self.__triggerEdited()

    def __updateCvss(self, cvss):
        self.badgeLabel.setText('{} ({})'.format(cvss.rating(), cvss.score()))
        self.badgeLabel.setStyleSheet(self.__badgeStyleSheet(cvss.color()))
        self.scoreInput.setText(str(cvss))
        self.__triggerEdited()

    def __triggerEdited(self):
        self._isEdited = True

    def __badgeStyleSheet(self, background = QtPtCore.QtPt.DefaultColor, foreground = '#fff'):
        return '''
            padding: .5em 1em;
            border-radius: 2px;
            color: {foreground};
            background: {background};
        '''.format(background=background, foreground=foreground)