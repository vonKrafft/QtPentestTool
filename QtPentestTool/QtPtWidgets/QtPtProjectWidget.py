# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtObjects


class QProjectWidget(QtWidgets.QWidget):
    """docstring for QProjectWidget"""

    newClicked = QtCore.pyqtSignal()
    editClicked = QtCore.pyqtSignal()
    screenshotClicked = QtCore.pyqtSignal()
    targetTriggered = QtCore.pyqtSignal(str)

    def __init__(self, *args, **kwargs):
        super(QProjectWidget, self).__init__(*args, **kwargs)

        self.layout = QtWidgets.QVBoxLayout()
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.setLayout(self.layout)

        # Buttons

        self.buttonsLayout = QtWidgets.QGridLayout()
        self.buttonsLayout.setContentsMargins(0, 0, 0, 0)

        self.buttonsWidget = QtWidgets.QWidget(self)
        self.buttonsWidget.setLayout(self.buttonsLayout)

        self.newButton = QtWidgets.QPushButton(QtGui.QIcon.fromTheme('folder-new'), 'New project', self)
        self.newButton.clicked[bool].connect(self.__newProject)
        self.newButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.newButton.setStatusTip('Create a new project')
        self.buttonsLayout.addWidget(self.newButton, 0, 1)

        self.editButton = QtWidgets.QPushButton(QtGui.QIcon.fromTheme('document-properties'), 'Edit project', self)
        self.editButton.clicked[bool].connect(self.__editProject)
        self.editButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.editButton.setStatusTip('Edit the current project')
        self.buttonsLayout.addWidget(self.editButton, 0, 2)

        self.screenshotButton = QtWidgets.QPushButton(QtGui.QIcon.fromTheme('insert-image'), 'Project\'s screenshot', self)
        self.screenshotButton.clicked[bool].connect(self.__takeScreenshot)
        self.screenshotButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.screenshotButton.setStatusTip('Capture the current screen after 5 seconds and save it into current project')
        self.buttonsLayout.addWidget(self.screenshotButton, 0, 3)

        # Targets

        self.targetsList = QtWidgets.QListWidget(self)
        self.targetsList.setFocusPolicy(QtCore.Qt.NoFocus)
        self.targetsList.setSelectionMode(QtWidgets.QAbstractItemView.NoSelection)
        self.targetsList.setMaximumHeight(85)

        self.targetsList.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.targetsList.customContextMenuRequested.connect(self.__contextTargetMenu)

        # Accounts

        self.accountsList = QtWidgets.QListWidget(self)
        self.accountsList.setFocusPolicy(QtCore.Qt.NoFocus)
        self.accountsList.setSelectionMode(QtWidgets.QAbstractItemView.NoSelection)
        self.accountsList.setMaximumHeight(85)

        self.accountsList.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.accountsList.customContextMenuRequested.connect(self.__contextAccountMenu)

        # QProjectWidget

        self.layout.addWidget(self.buttonsWidget)
        self.layout.addWidget(self.targetsList)
        self.layout.addWidget(self.accountsList)

    def setVisible(self, visible = True):
        self.buttonsWidget.setVisible(True)
        self.newButton.setVisible(not visible)
        self.editButton.setVisible(visible)
        self.screenshotButton.setEnabled(visible)
        self.targetsList.setVisible(visible)
        self.accountsList.setVisible(visible)
        super(QProjectWidget, self).setVisible(True)

    def setProject(self, project):        
        self.targetsList.clear()
        for row, target in enumerate(project.targets):
            self.targetsList.addItem(str(target))
        self.targetsList.setVisible(len(project.targets) > 0)
        
        self.accountsList.clear()
        for row, account in enumerate(project.accounts):
            self.accountsList.addItem(str(account))
        self.accountsList.setVisible(len(project.accounts) > 0)

    def __newProject(self):
        self.newClicked.emit()

    def __editProject(self):
        self.editClicked.emit()

    def __takeScreenshot(self):
        self.screenshotClicked.emit()

    def __contextTargetMenu(self, pos):
        currentItem = self.sender().currentItem()
        currentTarget = QtPtObjects.QTarget.fromString(currentItem.text() if currentItem is not None else '')
        self.sender().setCurrentItem(None)

        openBrowserAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('applications-internet'), 'Open in browser')
        openBrowserAct.setEnabled(currentTarget.isLink())
        copyHostnameAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('edit-copy'), 'Copy hostname/URL')
        copyHostnameAct.setEnabled(currentTarget.get('hostname') is not None)
        copyIpAddressAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('edit-copy'), 'Copy IP address')
        copyIpAddressAct.setEnabled(currentTarget.get('ip') is not None)
        copyAllTargetAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('edit-copy'), 'Copy full text')
        copyAllTargetAct.setEnabled(currentItem is not None)

        cmenu = QtWidgets.QMenu(self.sender())

        cmenu.addAction(openBrowserAct)
        cmenu.addSeparator()
        cmenu.addAction(copyHostnameAct)
        cmenu.addAction(copyIpAddressAct)
        cmenu.addSeparator()
        cmenu.addAction(copyAllTargetAct)

        action = cmenu.exec_(self.sender().mapToGlobal(pos))

        if action == openBrowserAct:
            self.targetTriggered.emit(currentTarget.get('hostname', ''))
        elif action == copyHostnameAct:
            self.fillClipboard(currentTarget.get('hostname', ''), 'Hostname copied to clipboard')
        elif action == copyIpAddressAct:
            self.fillClipboard(currentTarget.get('ip', ''), 'IP address copied to clipboard')
        elif action == copyAllTargetAct:
            self.fillClipboard(currentItem.text() if currentItem is not None else '', 'Target copied to clipboard')

    def __contextAccountMenu(self, pos):
        currentItem = self.sender().currentItem()
        currentAccount = QtPtObjects.QAccount.fromString(currentItem.text() if currentItem is not None else '')
        self.sender().setCurrentItem(None)

        copyUsernameAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('edit-copy'), 'Copy username')
        copyUsernameAct.setEnabled(currentAccount.get('username') is not None)
        copyPasswordAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('edit-copy'), 'Copy password')
        copyPasswordAct.setEnabled(currentAccount.get('password') is not None)
        copyAllAccountAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('edit-copy'), 'Copy full text')
        copyAllAccountAct.setEnabled(currentItem is not None)

        cmenu = QtWidgets.QMenu(self.sender())

        cmenu.addAction(copyUsernameAct)
        cmenu.addAction(copyPasswordAct)
        cmenu.addSeparator()
        cmenu.addAction(copyAllAccountAct)

        action = cmenu.exec_(self.sender().mapToGlobal(pos))

        if action == copyUsernameAct:
            self.fillClipboard(currentAccount.get('username', ''), 'Username copied to clipboard')
        elif action == copyPasswordAct:
            self.fillClipboard(currentAccount.get('password', ''), 'Password copied to clipboard')
        elif action == copyAllAccountAct:
            self.fillClipboard(currentItem.text() if currentItem is not None else '', 'Account copied to clipboard')

    def fillClipboard(self, text, statusMessage = 'Copied to clipboard'):
        QtWidgets.QApplication.clipboard().setText(text)
        if isinstance(self.window(), QtWidgets.QMainWindow):
            self.window().statusBar().showMessage(statusMessage, msecs=5000)