# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtObjects

import json
import os


class QScanTemplateDialog(QtWidgets.QDialog):
    """Scan dialog for QtPentestTool.

    Attributes:
        layout (QtWidgets.QFormLayout): Current dialog's layout

        pathLabel (QtWidgets.QLabel)
        pathLayout (QtWidgets.QGridLayout)
        pathWidget (QtWidgets.QWidget)
        pathInput (QtWidgets.QLineEdit)
        pathSelector (QtWidgets.QPushButton)
        pathTooltip (QtWidgets.QLabel)

        nameLabel (QtWidgets.QLabel)
        nameInput (QtWidgets.QLineEdit)

        commandLabel (QtWidgets.QLabel)
        commandInput (QtWidgets.QLineEdit)
        commandTooltip (QtWidgets.QLabel)

        outputLabel (QtWidgets.QLabel)
        outputInput (QtWidgets.QLineEdit)

        buttonBox (QtWidgets.QDialogButtonBox)

    Constants:
        KEYWORDS ([str]): List of keywords to be replaced in the command

    """

    KEYWORDS = ['{{scan_dir}}', '{{scheme}}', '{{hostname}}', '{{url}}']

    def __init__(self, *args, **kwargs) -> None:
        """ Class constructor.

        Args:
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        """
        super(QScanTemplateDialog, self).__init__(*args, **kwargs)
        self.setWindowModality(QtCore.Qt.ApplicationModal)

        self.layout = QtWidgets.QFormLayout()
        self.setLayout(self.layout)
        self.setMinimumWidth(500)

        # Scan

        self.pathLabel = QtWidgets.QLabel('Save in')

        self.pathLayout = QtWidgets.QGridLayout()
        self.pathLayout.setContentsMargins(0, 0, 0, 0)

        self.pathWidget = QtWidgets.QWidget(self)
        self.pathWidget.setLayout(self.pathLayout)

        self.pathInput = QtWidgets.QLineEdit()
        self.pathSelector = QtWidgets.QPushButton(QtGui.QIcon.fromTheme('folder-open'), None)
        self.pathSelector.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pathSelector.clicked.connect(self.selectFile)
        self.pathTooltip = QtWidgets.QLabel(font=QtGui.QFont('SansSerif', 8))

        self.pathLayout.addWidget(self.pathInput, 0, 0, 1, 1)
        self.pathLayout.addWidget(self.pathSelector, 0, 1, 1, 1)
        self.pathLayout.addWidget(self.pathTooltip, 1, 0, 1, 2)

        self.nameLabel = QtWidgets.QLabel('Name')
        self.nameInput = QtWidgets.QLineEdit()

        self.commandLabel = QtWidgets.QLabel('Command')
        self.commandInput = QtWidgets.QLineEdit()

        self.commandTooltip = QtWidgets.QLabel(f'The following keywords could be used: {", ".join(self.KEYWORDS)}')
        self.commandTooltip.setFont(QtGui.QFont('SansSerif', 8))

        self.outputLabel = QtWidgets.QLabel('Output')
        self.outputInput = QtWidgets.QLineEdit(placeholderText='output.txt')

        # Buttons

        self.buttonBox = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

        # QProjectDialog
         
        self.layout.addRow(self.pathLabel, self.pathWidget)
        self.layout.addRow(self.nameLabel, self.nameInput)
        self.layout.addRow(self.commandLabel, self.commandInput)
        self.layout.addRow(None, self.commandTooltip)
        self.layout.addRow(self.outputLabel, self.outputInput)
        self.layout.addRow(self.buttonBox)

    def show(self) -> bool:
        """ Overwrite the parent method.

        Returns:
            bool: Either or not the Accept button has been clicked

        """
        return self.exec_()

    def exec_(self) -> bool:
        """ Overwrite the parent method.

        Returns:
            bool: Either or not the Accept button has been clicked

        """
        ret = super(QScanTemplateDialog, self).exec_()
        return bool(ret)

    def accept(self) -> 'QtWidgets.QDialog.DialogCode' :
        """ Overwrite the parent method.

        Returns:
            QtWidgets.QDialog.DialogCode: Either or not the Accept button has been clicked

        """
        jsonFile = QtCore.QFileInfo(self.pathInput.text())

        if jsonFile.exists() and jsonFile.isFile():
            overwriteBox = QtWidgets.QMessageBox(self)
            overwriteBox.setWindowTitle('Overwrite File?')
            overwriteBox.setIcon(QtWidgets.QMessageBox.Warning)
            overwriteBox.setText(f'The file "{jsonFile.fileName()}" already exists. Do you wish to overwrite it?')
            overwriteBox.addButton(self.tr('Overwrite'), QtWidgets.QMessageBox.AcceptRole)
            overwriteBox.addButton(QtWidgets.QMessageBox.Cancel)
            overwriteBox.setDefaultButton(QtWidgets.QMessageBox.Cancel)
            if overwriteBox.exec_() == QtWidgets.QMessageBox.Cancel:
                return self.show()

        with open(jsonFile.absoluteFilePath(), 'w') as file:
            json.dump({
                'name': self.nameInput.text() if len(self.nameInput.text()) > 0 else None,
                'command': self.commandInput.text() if len(self.commandInput.text()) > 0 else None,
                'output': self.outputInput.text() if len(self.outputInput.text()) > 0 else None
            }, file, indent=4)

        return super(QScanTemplateDialog, self).accept()

    def setWindowTitle(self, dialogTitle: str, appTitle: str = None) -> None:
        """ Set the window title for the current dialog: <dialogTitle> - <appTitle>.

        Args: 
            dialogTitle (str): The dialog title (first part of the window title)
            appTitle (str): The application title (last part of the window title)

        """
        appTitle = f' - {appTitle or ""}' if len(appTitle or '') > 0 else ''
        super(QScanTemplateDialog, self).setWindowTitle(f'{dialogTitle}{appTitle}')

    def createTemplate(self, defaultPath: str, appTitle: str = None) -> bool:
        """ Open dialog to create a scan template.

        Args:
            defaultPath (str): The path in which to store the JSON
            appTitle (str, optional): The application title (default None)

        Returns:
            bool: Either or not the Accept button has been clicked

        """
        self.setWindowTitle('New Scan Template', appTitle)

        self.pathInput.setText(QtCore.QDir(defaultPath).filePath('00-scan.json'))
        self.pathTooltip.setText(f'The template must be saved to the root or subdirectory of the "{defaultPath}" folder')

        return self.show()

    def selectFile(self) -> None:
        """ Select a file to store the JSON.

        """
        caption, selectedFilter = QtWidgets.QFileDialog.getSaveFileName(self, 'Save Scan Template', self.pathInput.text())
        self.pathInput.setText(caption)