# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtObjects
from .. import QtPtWidgets

import json
import os


class QScanTemplateDialog(QtWidgets.QDialog):
    """Scan dialog for QtPentestTool.

    Attributes:
        layout (QtWidgets.QFormLayout): Current dialog's layout

        pathLabel (QtWidgets.QLabel)
        pathInput (QtPtWidgets.QFilePathBox)
        pathTooltip (QtWidgets.QLabel)

        nameLabel (QtWidgets.QLabel)
        nameInput (QtWidgets.QLineEdit)

        commandLabel (QtWidgets.QLabel)
        commandInput (QtWidgets.QLineEdit)
        commandTooltip (QtWidgets.QLabel)

        outputLabel (QtWidgets.QLabel)
        outputInput (QtWidgets.QLineEdit)

        buttonBox (QtWidgets.QDialogButtonBox)

    Constants:
        KEYWORDS ([str]): List of keywords to be replaced in the command

    """

    KEYWORDS = ['{{scan_dir}}', '{{scheme}}', '{{hostname}}', '{{url}}']

    def __init__(self, *args, **kwargs) -> None:
        """ Class constructor.

        Args:
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        """
        super(QScanTemplateDialog, self).__init__(*args, **kwargs)
        self.setWindowModality(QtCore.Qt.ApplicationModal)

        self.layout = QtWidgets.QFormLayout()
        self.setLayout(self.layout)
        self.setMinimumWidth(500)

        # Scan

        self.pathLabel = QtWidgets.QLabel('Save in')
        self.pathInput = QtPtWidgets.QFilePathBox()

        self.pathTooltip = QtWidgets.QLabel()
        self.pathTooltip.setFont(QtGui.QFont('SansSerif', 8))

        self.nameLabel = QtWidgets.QLabel('Name')
        self.nameInput = QtWidgets.QLineEdit()

        self.commandLabel = QtWidgets.QLabel('Command')
        self.commandInput = QtWidgets.QLineEdit()

        self.commandTooltip = QtWidgets.QLabel(f'The following keywords could be used: {", ".join(self.KEYWORDS)}')
        self.commandTooltip.setFont(QtGui.QFont('SansSerif', 8))

        self.outputLabel = QtWidgets.QLabel('Output')
        self.outputInput = QtWidgets.QLineEdit(placeholderText='output.txt')

        # Buttons

        self.buttonBox = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

        # QProjectDialog
         
        self.layout.addRow(self.pathLabel, self.pathInput)
        self.layout.addRow(None, self.pathTooltip)
        self.layout.addRow(self.nameLabel, self.nameInput)
        self.layout.addRow(self.commandLabel, self.commandInput)
        self.layout.addRow(None, self.commandTooltip)
        self.layout.addRow(self.outputLabel, self.outputInput)
        self.layout.addRow(self.buttonBox)

    def setWindowTitle(self, dialogTitle: str, appTitle: str = None) -> None:
        """ Set the window title for the current dialog: <dialogTitle> - <appTitle>.

        Args: 
            dialogTitle (str): The dialog title (first part of the window title)
            appTitle (str): The application title (last part of the window title)

        """
        appTitle = f' - {appTitle or ""}' if len(appTitle or '') > 0 else ''
        super(QScanTemplateDialog, self).setWindowTitle(f'{dialogTitle}{appTitle}')

    @staticmethod
    def openTemplateCreator(defaultPath: str, appTitle: str = None, parent: 'QtWidgets.QWidget' = None) -> (str, bool):
        """ Open dialog to create a scan template.

        Args:
            defaultPath (str): The path in which to store the JSON
            appTitle (str, optional): The application title (default None)
            parent (QtWidgets.QWidget, optional): The parent widget on which to anchor the dialog (default None)

        Returns:
            (str, bool): The created filename and either or not the Accept button has been clicked

        """
        dialog = QScanTemplateDialog(parent)
        dialog.setWindowTitle('New Scan Template', appTitle)

        dialog.pathInput.setText(QtCore.QDir(defaultPath).filePath('00-scan.json'))
        dialog.pathTooltip.setText(f'The template must be saved to the root or subdirectory of the "{defaultPath}" folder')

        jsonFile = QtCore.QFileInfo(dialog.pathInput.text())

        result = dialog.exec_()
        while jsonFile.exists() and jsonFile.isFile():
            if dialog.confirmOverwrite(jsonFile.fileName()) is True:
                break
            result = dialog.exec_()

        if result == QtWidgets.QDialog.Accepted:
            with open(jsonFile.absoluteFilePath(), 'w') as file:
                json.dump({
                    'name': dialog.nameInput.text() if len(dialog.nameInput.text()) > 0 else None,
                    'command': dialog.commandInput.text() if len(dialog.commandInput.text()) > 0 else None,
                    'output': dialog.outputInput.text() if len(dialog.outputInput.text()) > 0 else None
                }, file, indent=4)

        return jsonFile.absoluteFilePath(), bool(result == QtWidgets.QDialog.Accepted)

    def confirmOverwrite(self, fileName: str) -> bool:
        """ Open dialog to confirm the overwriting of the file to save.

        Args:
            fileName (str): The existing filename

        Returns:
            bool: Either or not the Accept button has been clicked

        """
        overwriteBox = QtWidgets.QMessageBox(self)
        overwriteBox.setWindowTitle('Overwrite File?')
        overwriteBox.setIcon(QtWidgets.QMessageBox.Warning)
        overwriteBox.setText(f'The file "{fileName}" already exists. Do you wish to overwrite it?')
        overwriteBox.addButton('Overwrite', QtWidgets.QMessageBox.AcceptRole)
        overwriteBox.addButton(QtWidgets.QMessageBox.Cancel)
        overwriteBox.setDefaultButton(QtWidgets.QMessageBox.Cancel)
        return bool(overwriteBox.exec_() != QtWidgets.QMessageBox.Cancel)