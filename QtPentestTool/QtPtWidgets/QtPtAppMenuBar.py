# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

import glob
import json
import os


class QAppMenuBar(QtWidgets.QMenuBar):
    """docstring for QAppMenuBar"""

    recentMenuTriggered = QtCore.pyqtSignal(str)
    scanMenuTriggered = QtCore.pyqtSignal(str)

    def __init__(self, *args, **kwargs):
        super(QAppMenuBar, self).__init__(*args, **kwargs)

        self.fileMenu = self.addMenu('File')
        self.editMenu = self.addMenu('Edit')
        self.scanMenu = self.addMenu('Scan')
        self.helpMenu = self.addMenu('Help')

        # Project menu

        self.projMenu = QtWidgets.QMenu('Project', self)

        self.newProjAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('folder-new'), 'New project', self)
        self.newProjAct.setShortcut('Ctrl+Shift+N')
        self.newProjAct.setStatusTip('Start a new mission and create a working directory')

        self.openProjAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('document-open'), 'Open project', self)
        self.openProjAct.setShortcut('Ctrl+O')
        self.openProjAct.setStatusTip('Open an existing working directory')

        self.editProjAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('document-properties'), 'Edit project', self, enabled=False)
        self.editProjAct.setShortcut('Ctrl+Shift+E')
        self.editProjAct.setStatusTip('Edit the current project')

        self.screenProjAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('insert-image'), 'Take a screenshot', self, enabled=False)
        self.screenProjAct.setShortcut('Ctrl+Shift+T')
        self.screenProjAct.setStatusTip('Capture the current screen after 5 seconds and save it into current project')

        self.scanProjAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('system-search'), 'View scans results', self, enabled=False)
        self.scanProjAct.setStatusTip('Open the current project scans folder')

        self.folderProjAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('document-open'), 'Open containing folder', self, enabled=False)
        self.folderProjAct.setStatusTip('Open the current project\'s folder')

        self.refreshProjAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('view-refresh'), 'Refresh project', self, enabled=False)
        self.refreshProjAct.setShortcut('F5')
        self.refreshProjAct.setStatusTip('Refresh the current project')

        self.exportProjAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('document-save-as'), 'Export', self, enabled=False)
        self.exportProjAct.setStatusTip('Compress the current project')

        self.projMenu.addAction(self.newProjAct)
        self.projMenu.addAction(self.openProjAct)
        self.projMenu.addAction(self.editProjAct)
        self.projMenu.addSeparator()
        self.projMenu.addAction(self.screenProjAct)
        self.projMenu.addAction(self.scanProjAct)
        self.projMenu.addAction(self.folderProjAct)
        self.projMenu.addSeparator()
        self.projMenu.addAction(self.refreshProjAct)
        self.projMenu.addAction(self.exportProjAct)

        # Vulnerabilities menu

        self.vulnMenu = QtWidgets.QMenu('Vulnerability', self)

        self.newVulnAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('list-add'), 'New vulnerability', self, enabled=False)
        self.newVulnAct.setShortcut('Ctrl+N')
        self.newVulnAct.setStatusTip('Create a new vulnerability')

        self.saveVulnAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('document-save'), 'Save vulnerability', self, enabled=False)
        self.saveVulnAct.setShortcut('Ctrl+S')
        self.saveVulnAct.setStatusTip('Save the current vulnerability')

        self.deleteVulnAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('list-remove'), 'Delete vulnerability', self, enabled=False)
        self.deleteVulnAct.setShortcut('Ctrl+D')
        self.deleteVulnAct.setStatusTip('Delete the current vulnerability')

        self.renameVulnAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('insert-text'), 'Rename folder', self, enabled=False)
        self.renameVulnAct.setStatusTip('Rename the current vulnerability\'s folder from the vulnerability\'s name')

        self.screenVulnAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('insert-image'), 'Take a screenshot', self, enabled=False)
        self.screenVulnAct.setShortcut('Ctrl+T')
        self.screenVulnAct.setStatusTip('Capture the current screen after 5 seconds ans save it into current vulnerability')

        self.folderVulnAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('document-open'), 'Open containing folder', self, enabled=False)
        self.folderVulnAct.setStatusTip('Open the current vulnerability\'s folder')

        self.fileVulnAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('document-new'), 'Open associated file', self, enabled=False)
        self.fileVulnAct.setStatusTip('Open the current vulnerability text file')

        self.vulnMenu.addAction(self.newVulnAct)
        self.vulnMenu.addSeparator()
        self.vulnMenu.addAction(self.saveVulnAct)
        self.vulnMenu.addAction(self.deleteVulnAct)
        self.vulnMenu.addAction(self.renameVulnAct)
        self.vulnMenu.addSeparator()
        self.vulnMenu.addAction(self.screenVulnAct)
        self.vulnMenu.addAction(self.folderVulnAct)
        self.vulnMenu.addAction(self.fileVulnAct)

        # File menu

        self.recentProjMenu = QtWidgets.QMenu('Recent', self, enabled=False)

        self.quitAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('application-exit'), 'Quit', self, objectName="test")
        self.quitAct.setShortcut('Ctrl+Q')
        self.quitAct.setStatusTip('Exit application')
        self.quitAct.triggered.connect(QtWidgets.qApp.quit)

        self.fileMenu.addMenu(self.projMenu)
        self.fileMenu.addMenu(self.vulnMenu)
        self.fileMenu.addMenu(self.recentProjMenu)
        self.fileMenu.addSeparator()
        self.fileMenu.addAction(self.quitAct)

        # Edit menu

        self.preferencesAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('preferences-other'), 'Preferences', self)
        self.preferencesAct.setShortcut('Ctrl+Shift+P')
        self.preferencesAct.setStatusTip('Edit the application preferences')

        self.editMenu.addAction(self.preferencesAct)

        # Scan menu

        self.folderScanAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('document-open'), 'Open configuration folder', self)
        self.folderScanAct.setStatusTip('Open the current vulnerability\'s folder')

        self.refreshScanAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('view-refresh'), 'Refresh scans list', self)
        self.refreshScanAct.setStatusTip('Open a new template to create scan action')

        self.templateScanAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('window-new'), 'Add new scan template', self)
        self.templateScanAct.setStatusTip('View the template to create scan action')

        self.scanMenu.addAction(self.folderScanAct)
        self.scanMenu.addAction(self.refreshScanAct)
        self.scanMenu.addAction(self.templateScanAct)

        # Help menu

        self.aboutAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('help-about'), 'About', self)
        self.aboutAct.setShortcut('F1')
        self.aboutAct.setStatusTip('About the application')

        self.aboutQtAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('help-contents'), 'About Qt', self)
        self.aboutQtAct.setStatusTip('About the application')

        self.helpMenu.addAction(self.aboutAct)
        self.helpMenu.addAction(self.aboutQtAct)

    def __triggerRecentMenu(self):
        self.recentMenuTriggered.emit(self.sender().statusTip())

    def __triggerScanMenu(self):
        self.scanMenuTriggered.emit(self.sender().whatsThis())

    def updateRecentMenu(self, projectPaths):
        self.recentProjMenu.clear()

        for path in projectPaths:
            recentProjAct = QtWidgets.QAction(os.path.basename(path), self)
            recentProjAct.setStatusTip(path)
            recentProjAct.triggered.connect(self.__triggerRecentMenu)
            self.recentProjMenu.addAction(recentProjAct)

        self.recentProjMenu.setEnabled(len(projectPaths) > 0)

    def updateScanMenu(self, scandir, outputdir = '/tmp', *argv, **kwargs):
        self.scanMenu.clear()

        scandir = os.path.abspath(scandir)
        self.createScanSubMenu(self.scanMenu, os.path.abspath(scandir), outputdir, *argv, **kwargs)

        self.scanMenu.addSeparator()
        self.scanMenu.addAction(self.folderScanAct)
        self.scanMenu.addAction(self.refreshScanAct)
        self.scanMenu.addAction(self.templateScanAct)

    def createScanSubMenu(self, parent, scandir, outputdir, *argv, **kwargs):
        scandir = os.path.abspath(scandir)
        if not os.path.isdir(scandir):
            return

        for dirname in [p for p in os.listdir(scandir) if os.path.isdir(os.path.join(scandir, p))]:
            menu = QtWidgets.QMenu(dirname, self)
            self.createScanSubMenu(menu, os.path.join(scandir, dirname), outputdir, *argv, **kwargs)
            parent.addMenu(menu)

        for filename in sorted(glob.glob(os.path.join(scandir, '*.json'))):
            try:
                with open(filename, 'r') as file:
                    scan = json.load(file)
                if scan.get('output', None) is not None and os.path.isfile(os.path.join(os.path.abspath(outputdir), scan.get('output'))):
                    scanAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('security-high'), scan.get('name', 'Unknown scan'), self, *argv, **kwargs)
                else:
                    scanAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('security-low'), scan.get('name', 'Unknown scan'), self, *argv, **kwargs)
                scanAct.setStatusTip(scan.get('command', filename))
                scanAct.setWhatsThis(filename)
                scanAct.triggered.connect(self.__triggerScanMenu)
            except:
                scanAct = QtWidgets.QAction(QtGui.QIcon.fromTheme('text-x-script'), os.path.basename(filename), self, *argv, **kwargs)
                scanAct.setEnabled(False)
            parent.addAction(scanAct)

    def setEnableProjectActions(self, enabled):
        self.editProjAct.setEnabled(bool(enabled))
        self.screenProjAct.setEnabled(bool(enabled))
        self.scanProjAct.setEnabled(bool(enabled))
        self.folderProjAct.setEnabled(bool(enabled))
        self.refreshProjAct.setEnabled(bool(enabled))
        self.exportProjAct.setEnabled(bool(enabled))
        self.newVulnAct.setEnabled(bool(enabled))

    def setEnableVulnerabilityActions(self, enabled):
        self.saveVulnAct.setEnabled(bool(enabled))
        self.deleteVulnAct.setEnabled(bool(enabled))
        self.renameVulnAct.setEnabled(bool(enabled))
        self.screenVulnAct.setEnabled(bool(enabled))
        self.folderVulnAct.setEnabled(bool(enabled))
        self.fileVulnAct.setEnabled(bool(enabled))