# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtObjects

import json
import os


class QScanDialog(QtWidgets.QDialog):

    def __init__(self, *args, **kwargs):
        super(QScanDialog, self).__init__(*args, **kwargs)
        self.setWindowModality(QtCore.Qt.ApplicationModal)

        self.layout = QtWidgets.QFormLayout()
        self.setLayout(self.layout)
        self.setMinimumWidth(500)

        # Scan

        self.nameLabel = QtWidgets.QLabel()
        self.nameLabel.setFont(QtGui.QFont('SansSerif', 24))

        self.commandLabel = QtWidgets.QLabel(self)
        self.commandLabel.setFont(QtGui.QFont('monospace'))
        self.commandLabel.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
        self.commandLabel.setStyleSheet('padding: .5em; border-radius: 2px; color: white; background: black;')

        self.outputLabel = QtWidgets.QLabel()
        self.outputLabel.setFont(QtGui.QFont('SansSerif', 8))

        self.paramGroupBox = QtWidgets.QGroupBox()
        self.paramLayout = QtWidgets.QFormLayout()
        self.paramGroupBox.setLayout(self.paramLayout)

        self.paramScanDirLabel = QtWidgets.QLabel('Scan Directory')
        self.paramScanDirInput = QtWidgets.QLineEdit(readOnly=True)
        self.paramScanDirInput.setFocusPolicy(QtCore.Qt.NoFocus)

        disabledPalette = QtGui.QPalette()
        disabledPalette.setColor(QtGui.QPalette.Base, disabledPalette.window().color())
        disabledPalette.setColor(QtGui.QPalette.Text, disabledPalette.windowText().color())
        self.paramScanDirInput.setPalette(disabledPalette)

        self.paramSchemeLabel = QtWidgets.QLabel('Scheme')
        self.paramSchemeInput = QtWidgets.QComboBox()
        self.paramSchemeInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        self.paramHostnameLabel = QtWidgets.QLabel('Hostname')
        self.paramHostnameInput = QtWidgets.QComboBox()
        self.paramHostnameInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        self.paramUrlLabel = QtWidgets.QLabel('URL')
        self.paramUrlInput = QtWidgets.QComboBox()
        self.paramUrlInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        # Buttons

        self.buttonBox = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

        # QProjectDialog
         
        self.layout.addRow(self.nameLabel)
        self.layout.addRow(self.commandLabel)
        self.layout.addRow(self.outputLabel)
        self.layout.addRow(self.paramGroupBox)
        self.layout.addRow(self.buttonBox)

    def show(self):
        return self.exec_()

    def exec_(self):
        ret = super(QScanDialog, self).exec_()

        command = self._scan.get('command', '')
        command = command.replace('{{scan_dir}}', self.paramScanDirInput.text())
        command = command.replace('{{scheme}}', self.paramSchemeInput.currentText())
        command = command.replace('{{hostname}}', self.paramHostnameInput.currentText())
        command = command.replace('{{url}}', self.paramUrlInput.currentText())

        if self.output is not None:
            command = '{} | tee -a {}'.format(command, self.output)

        return command, bool(ret)

    def setWindowTitle(self, dialogTitle, appTitle = None):
        appTitle = ' - {}'.format(appTitle or '') if len(appTitle or '') > 0 else ''
        super(QScanDialog, self).setWindowTitle('{}{}'.format(dialogTitle, appTitle))

    def configureScan(self, path, project, appTitle = None):
        self.setWindowTitle('Scan', appTitle)

        self.setScan(path)

        if self._scan.get('command') is None:
            return None, QtWidgets.QMessageBox.critical(self.parent(), 'Error', 'Invalid JSON!', QtWidgets.QMessageBox.Abort)

        self.nameLabel.setText(self._scan.get('name', 'Scan'))
        self.commandLabel.setText('> {}'.format(self._scan.get('command')))

        if self._scan.get('output') is not None:
            self.output = os.path.join(project.getScanDir(), self._scan.get('output'))
            self.outputLabel.setText('Results will be write in "{}"'.format(self.output))
        else:
            self.output = None
            self.outputLabel.setText('No log file is specified! Make sure the program has a logging feature enabled.')

        for i in reversed(range(self.paramLayout.count())): 
            self.paramLayout.itemAt(i).widget().setParent(None)

        if '{{scan_dir}}' in self._scan.get('command', ''):
            self.paramLayout.addRow(self.paramScanDirLabel, self.paramScanDirInput)
            self.paramScanDirInput.setText(project.getScanDir())
        if '{{scheme}}' in self._scan.get('command', ''):
            self.paramLayout.addRow(self.paramSchemeLabel, self.paramSchemeInput)
            self.paramSchemeInput.addItems(['http', 'https'])
        if '{{hostname}}' in self._scan.get('command', ''):
            self.paramLayout.addRow(self.paramHostnameLabel, self.paramHostnameInput)
            for target in project.targets:
                scheme, hostname, path = self.parseTarget(target)
                self.paramHostnameInput.addItem(hostname)
            self.paramHostnameInput.setCurrentIndex(0)
        if '{{url}}' in self._scan.get('command', ''):
            self.paramLayout.addRow(self.paramUrlLabel, self.paramUrlInput)
            for target in project.targets:
                scheme, hostname, path = self.parseTarget(target)
                self.paramUrlInput.addItem(hostname + path)
            self.paramUrlInput.setCurrentIndex(0)

        return self.show()

    def setScan(self, path):
        try:
            with open(os.path.abspath(path), 'r') as file:
                data = json.load(file)
            self._scan = { **{ 'name': None, 'command': None, 'output': None }, **data }
        except:
            self._scan = { 'name': None, 'command': None, 'output': None }

    def parseTarget(self, target):
        if isinstance(target, QtPtObjects.QTarget):
            scheme = target.getScheme()
            hostname = target.hostname.replace(scheme, '')
            hostname, path = hostname.split('/', 1) if '/' in hostname else (hostname, '')
        else:
            scheme = 'https://' if str(target).startswith('https://') else 'http://'
            hostname = str(target).replace(scheme, '')
            hostname, path = hostname.split('/', 1) if '/' in hostname else (hostname, '')
        return scheme, hostname, '/' + str(path)

    def accept(self):        
        super(QScanDialog, self).accept()