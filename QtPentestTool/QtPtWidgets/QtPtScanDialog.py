# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtObjects

import json
import os


class QScanDialog(QtWidgets.QDialog):
    """Scan dialog for QtPentestTool.

    Attributes:
        _scan ({str: str}): Scan object linked to the dialog
        _output (str): The filename to store scan results

        layout (QtWidgets.QFormLayout): Current dialog's layout

        nameLabel (QtWidgets.QLabel)
        commandLabel (QtWidgets.QLabel)
        outputLabel (QtWidgets.QLabel)

        paramGroupBox (QtWidgets.QGroupBox)
        paramLayout (QtWidgets.QFormLayout)
        paramScanDirLabel (QtWidgets.QLabel)
        paramScanDirInput (QtWidgets.QLineEdit)
        paramSchemeLabel (QtWidgets.QLabel)
        paramSchemeInput (QtWidgets.QComboBox)
        paramHostnameLabel (QtWidgets.QLabel)
        paramHostnameInput (QtWidgets.QComboBox)
        paramUrlLabel (QtWidgets.QLabel)
        paramUrlInput (QtWidgets.QComboBox)

        buttonBox (QtWidgets.QDialogButtonBox)

    """

    def __init__(self, *args, **kwargs) -> None:
        """ Class constructor.

        Args:
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        """
        super(QScanDialog, self).__init__(*args, **kwargs)
        self.setWindowModality(QtCore.Qt.ApplicationModal)

        self.layout = QtWidgets.QFormLayout()
        self.setLayout(self.layout)
        self.setMinimumWidth(500)

        # Scan

        self.nameLabel = QtWidgets.QLabel()
        self.nameLabel.setFont(QtGui.QFont('SansSerif', 24))

        self.commandLabel = QtWidgets.QLabel(self)
        self.commandLabel.setFont(QtGui.QFont('monospace'))
        self.commandLabel.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
        self.commandLabel.setStyleSheet('padding: .5em; border-radius: 2px; color: white; background: black;')

        self.outputLabel = QtWidgets.QLabel()
        self.outputLabel.setFont(QtGui.QFont('SansSerif', 8))

        self.paramGroupBox = QtWidgets.QGroupBox()
        self.paramLayout = QtWidgets.QFormLayout()
        self.paramGroupBox.setLayout(self.paramLayout)

        self.paramScanDirLabel = QtWidgets.QLabel('Scan Directory')
        self.paramScanDirInput = QtWidgets.QLineEdit(readOnly=True)
        self.paramScanDirInput.setFocusPolicy(QtCore.Qt.NoFocus)

        disabledPalette = QtGui.QPalette()
        disabledPalette.setColor(QtGui.QPalette.Base, disabledPalette.window().color())
        disabledPalette.setColor(QtGui.QPalette.Text, disabledPalette.windowText().color())
        self.paramScanDirInput.setPalette(disabledPalette)

        self.paramSchemeLabel = QtWidgets.QLabel('Scheme')
        self.paramSchemeInput = QtWidgets.QComboBox()
        self.paramSchemeInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        self.paramHostnameLabel = QtWidgets.QLabel('Hostname')
        self.paramHostnameInput = QtWidgets.QComboBox()
        self.paramHostnameInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        self.paramUrlLabel = QtWidgets.QLabel('URL')
        self.paramUrlInput = QtWidgets.QComboBox()
        self.paramUrlInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        # Buttons

        self.buttonBox = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

        # QProjectDialog
         
        self.layout.addRow(self.nameLabel)
        self.layout.addRow(self.commandLabel)
        self.layout.addRow(self.outputLabel)
        self.layout.addRow(self.paramGroupBox)
        self.layout.addRow(self.buttonBox)

    def show(self) -> (str, bool):
        """ Overwrite the parent method.

        Returns:
            (str, bool): The command to execute and either or not the Accept button has been clicked

        """
        return self.exec_()

    def exec_(self) -> (str, bool):
        """ Overwrite the parent method: retrieve scan information and build 
        a shell command before return it.

        Returns:
            (str, bool): The command to execute and either or not the Accept button has been clicked

        """
        ret = super(QScanDialog, self).exec_()

        command = self._scan.get('command', '')
        command = command.replace('{{scan_dir}}', self.paramScanDirInput.text())
        command = command.replace('{{scheme}}', self.paramSchemeInput.currentText())
        command = command.replace('{{hostname}}', self.paramHostnameInput.currentText())
        command = command.replace('{{url}}', self.paramUrlInput.currentText())

        if self._output is not None:
            command = f'{command} | tee -a "{self._output}"'

        return command, bool(ret)

    def setWindowTitle(self, dialogTitle: str, appTitle: str = None) -> None:
        """ Set the window title for the current dialog: <dialogTitle> - <appTitle>.

        Args: 
            dialogTitle (str): The dialog title (first part of the window title)
            appTitle (str): The application title (last part of the window title)

        """
        appTitle = f' - {appTitle or ""}' if len(appTitle or '') > 0 else ''
        super(QScanDialog, self).setWindowTitle(f'{dialogTitle}{appTitle}')

    def configureScan(self, path: str, project: 'QtPtProject.QProject', appTitle: str = None) -> (str, bool):
        """ Open dialog to run a scan.

        Args:
            path (str): The path of the JSON file defining the scan properties
            project (QtPtProject.QProject): The project for which to perform the scan
            appTitle (str, optional): The application title (default None)

        Returns:
            (str, bool): The command to execute and either or not the Accept button has been clicked

        """
        self.setWindowTitle('Scan', appTitle)

        self.setScan(path)

        if self._scan.get('command') is None:
            return None, QtWidgets.QMessageBox.critical(self.parent(), 'Error', 'Invalid JSON!', QtWidgets.QMessageBox.Abort)

        self.nameLabel.setText(self._scan.get('name', 'Scan'))
        self.commandLabel.setText(f'> {self._scan.get("command")}')

        if self._scan.get('output') is not None:
            self._output = os.path.join(project.getScansDir(), self._scan.get('output'))
            self.outputLabel.setText(f'Results will be write in "{self._output}"')
        else:
            self._output = None
            self.outputLabel.setText('No log file is specified! Make sure the program has a logging feature enabled.')

        for i in reversed(range(self.paramLayout.count())): 
            self.paramLayout.itemAt(i).widget().setParent(None)

        if '{{scan_dir}}' in self._scan.get('command', ''):
            self.paramLayout.addRow(self.paramScanDirLabel, self.paramScanDirInput)
            self.paramScanDirInput.setText(project.getScansDir())
        if '{{scheme}}' in self._scan.get('command', ''):
            self.paramLayout.addRow(self.paramSchemeLabel, self.paramSchemeInput)
            self.paramSchemeInput.addItems(['http', 'https'])
        if '{{hostname}}' in self._scan.get('command', ''):
            self.paramLayout.addRow(self.paramHostnameLabel, self.paramHostnameInput)
            for target in project.targets:
                scheme, hostname, path = self.parseTarget(target)
                self.paramHostnameInput.addItem(hostname)
            self.paramHostnameInput.setCurrentIndex(0)
        if '{{url}}' in self._scan.get('command', ''):
            self.paramLayout.addRow(self.paramUrlLabel, self.paramUrlInput)
            for target in project.targets:
                scheme, hostname, path = self.parseTarget(target)
                self.paramUrlInput.addItem(hostname + path)
            self.paramUrlInput.setCurrentIndex(0)

        return self.show()

    def setScan(self, path: str) -> None:
        """ Read the given file to retrieve the scan properties.

        Args:
            path (str): The path of the JSON file defining the scan properties

        """
        try:
            with open(os.path.abspath(path), 'r') as file:
                data = json.load(file)
            self._scan = { **{ 'name': None, 'command': None, 'output': None }, **data }
        except:
            self._scan = { 'name': None, 'command': None, 'output': None }

    def parseTarget(self, target: object) -> (str, str, str):
        """ Parse the given target.

        Args:
            target (str or QtPtObjects.QTarget): The target to parse

        Returns:
            (str, str, str): The scheme, the hostname and the path of the given target

        """
        if isinstance(target, QtPtObjects.QTarget):
            scheme = target.getScheme()
            hostname = target.hostname.replace(scheme, '')
            hostname, path = hostname.split('/', 1) if '/' in hostname else (hostname, '')
        else:
            scheme = 'https://' if str(target).startswith('https://') else 'http://'
            hostname = str(target).replace(scheme, '')
            hostname, path = hostname.split('/', 1) if '/' in hostname else (hostname, '')
        return scheme, hostname, '/' + str(path)