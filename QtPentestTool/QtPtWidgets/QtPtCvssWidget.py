# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtCore
from .. import QtPtObjects
from .. import QtPtWidgets

import re


class QCvssWidget(QtWidgets.QWidget):
    """docstring for QCvssWidget"""

    triggered = QtCore.pyqtSignal(QtPtObjects.QCvss)

    def __init__(self, *args, **kwargs):
        super(QCvssWidget, self).__init__(*args, **kwargs)

        self._buttons = { 2: dict(), 3: dict() }
        self._cvss = None

        self.layout = QtWidgets.QHBoxLayout()
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.setLayout(self.layout)

        # Left column CVSS v2

        self.columnLeftV2Layout = QtPtWidgets.QCvssLayout()
        self.columnLeftV2Layout.setContentsMargins(0, 5, 5, 5)
        self.columnLeftV2Layout.setLabelAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)

        self.columnLeftV2Widget = QtWidgets.QWidget(self)
        self.columnLeftV2Widget.setLayout(self.columnLeftV2Layout)
        self.columnLeftV2Widget.setVisible(False)

        self.columnLeftV2Layout.addLabel('Exploitability Metrics')
        self.addButton(self.columnLeftV2Layout, QtPtCore.QtPt.AttackVectorMetric, 'Access Vector', 2)
        self.addButton(self.columnLeftV2Layout, QtPtCore.QtPt.AttackComplexityMetric, 'Access Complexity', 2)
        self.addButton(self.columnLeftV2Layout, QtPtCore.QtPt.AuthenticationMetric, 'Authentication', 2)

        # Right column CVSS v3

        self.columnRightV2Layout = QtPtWidgets.QCvssLayout()
        self.columnRightV2Layout.setContentsMargins(5, 5, 0, 5)
        self.columnRightV2Layout.setLabelAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)

        self.columnRightV2Widget = QtWidgets.QWidget(self)
        self.columnRightV2Widget.setLayout(self.columnRightV2Layout)
        self.columnRightV2Widget.setVisible(False)

        self.columnRightV2Layout.addLabel('Impact Metrics')
        self.addButton(self.columnRightV2Layout, QtPtCore.QtPt.ConfidentialityMetric, 'Confidentiality', 2)
        self.addButton(self.columnRightV2Layout, QtPtCore.QtPt.IntegrityMetric, 'Integrity', 2)
        self.addButton(self.columnRightV2Layout, QtPtCore.QtPt.AvailabilityMetric, 'Availability', 2)

        # Left column CVSS v3

        self.columnLeftV3Layout = QtPtWidgets.QCvssLayout()
        self.columnLeftV3Layout.setContentsMargins(0, 5, 5, 5)
        self.columnLeftV3Layout.setLabelAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)

        self.columnLeftV3Widget = QtWidgets.QWidget(self)
        self.columnLeftV3Widget.setLayout(self.columnLeftV3Layout)
        self.columnLeftV3Widget.setVisible(False)

        self.columnLeftV3Layout.addLabel('Exploitability Metrics')
        self.addButton(self.columnLeftV3Layout, QtPtCore.QtPt.AttackVectorMetric, 'Attack Vector', 3)
        self.addButton(self.columnLeftV3Layout, QtPtCore.QtPt.AttackComplexityMetric, 'Attack Complexity', 3)
        self.addButton(self.columnLeftV3Layout, QtPtCore.QtPt.PrivilegesRequiredMetric, 'Privileges Required', 3)
        self.addButton(self.columnLeftV3Layout, QtPtCore.QtPt.UserInteractionMetric, 'User Interaction', 3)

        # Right column CVSS v3

        self.columnRightV3Layout = QtPtWidgets.QCvssLayout()
        self.columnRightV3Layout.setContentsMargins(5, 5, 0, 5)
        self.columnRightV3Layout.setLabelAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)

        self.columnRightV3Widget = QtWidgets.QWidget(self)
        self.columnRightV3Widget.setLayout(self.columnRightV3Layout)
        self.columnRightV3Widget.setVisible(False)

        self.addButton(self.columnRightV3Layout, QtPtCore.QtPt.ScopeMetric, 'Scope', 3)
        self.columnRightV3Layout.addLabel('Impact Metrics')
        self.addButton(self.columnRightV3Layout, QtPtCore.QtPt.ConfidentialityMetric, 'Confidentiality', 3)
        self.addButton(self.columnRightV3Layout, QtPtCore.QtPt.IntegrityMetric, 'Integrity', 3)
        self.addButton(self.columnRightV3Layout, QtPtCore.QtPt.AvailabilityMetric, 'Availability', 3)

        # Buttons

        for btn in self.getButtons():
            btn.setCheckable(True)
            btn.setFocusPolicy(QtCore.Qt.NoFocus)
            btn.clicked[bool].connect(self.triggerButton)

        # QCvssWidget

        self.layout.addWidget(self.columnLeftV2Widget)
        self.layout.addWidget(self.columnRightV2Widget)
        self.layout.addWidget(self.columnLeftV3Widget)
        self.layout.addWidget(self.columnRightV3Widget)
        self.layout.addStretch(1)

    def addButton(self, parent, metric, label = '', version = 3):
        self._buttons[version][metric] = parent.addMetric(QtPtObjects.QMetric(metric, label, version))

    def getButtons(self):
        buttons = list()
        for version in self._buttons:
            for metricSid in self._buttons[version]:
                for metricValueSid in self._buttons[version][metricSid]:
                    if isinstance(self._buttons[version][metricSid][metricValueSid], QtWidgets.QPushButton):
                        buttons.append(self._buttons[version][metricSid][metricValueSid])
        return buttons

    def triggerButton(self, pressed):        
        metric, value = re.sub(r'.*\(([A-Za-z:]{1,2}:[A-Z])\)', r'\1', self.sender().text().replace('&', '')).split(':', 2)
        self._cvss.set(metric, value if pressed else None)

        self.updateCvss()
        self.triggered.emit(self._cvss)

    def cvss(self):
        return self._cvss
 
    def setCvss(self, cvss):
        self._cvss = cvss
        self.updateCvss()

    def updateCvss(self):
        self.columnLeftV2Widget.setVisible(False)
        self.columnRightV2Widget.setVisible(False)
        self.columnLeftV3Widget.setVisible(False)
        self.columnRightV3Widget.setVisible(False)

        self.columnLeftV2Widget.setVisible(self._cvss.version == 2)
        self.columnRightV2Widget.setVisible(self._cvss.version == 2)
        self.columnLeftV3Widget.setVisible(self._cvss.version == 3)
        self.columnRightV3Widget.setVisible(self._cvss.version == 3)

        for metricSid in self._buttons[self._cvss.version]:
            _ = [btn.setChecked(False) for btn in self._buttons[self._cvss.version][metricSid].values()]
            self._buttons[self._cvss.version][metricSid].get(str(self._cvss.get(metricSid)), QtWidgets.QPushButton()).setChecked(True)
