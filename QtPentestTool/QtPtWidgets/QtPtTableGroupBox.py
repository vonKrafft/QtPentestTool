# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtWidgets


class QTableGroupBox(QtWidgets.QWidget):
    """docstring for QTableGroupBox"""

    addTriggered = QtCore.pyqtSignal(object)
    editTriggered = QtCore.pyqtSignal(object)
    removeTriggered = QtCore.pyqtSignal(object)

    def __init__(self, *args, **kwargs):
        super(QTableGroupBox, self).__init__(*args, **kwargs)

        self.layout = QtWidgets.QGridLayout()
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.setLayout(self.layout)
        self.setMinimumWidth(500)

        self.table = QtPtWidgets.QTableEdit(self)
        self.table.currentRowChanged.connect(self.__changeCurrentRow)

        self.buttonBox = QtWidgets.QDialogButtonBox(QtCore.Qt.Vertical)

        self.addButton = QtWidgets.QPushButton(QtGui.QIcon.fromTheme('list-add'), 'Add', self)
        self.addButton.clicked[bool].connect(self.__triggerAdd)
        self.buttonBox.addButton(self.addButton, QtWidgets.QDialogButtonBox.ActionRole)

        self.removeButton = QtWidgets.QPushButton(QtGui.QIcon.fromTheme('list-remove'), 'Remove', self)
        self.removeButton.clicked[bool].connect(self.__triggerRemove)
        self.buttonBox.addButton(self.removeButton, QtWidgets.QDialogButtonBox.ActionRole)

        self.layout.addWidget(self.table, 1, 0)
        self.layout.addWidget(self.buttonBox, 1, 1)

    def paintEvent(self, event):
        self.removeButton.setEnabled(self.table.currentRow() >= 0)
        QtWidgets.QWidget.paintEvent(self, event)
    
    def __triggerAdd(self):
        item = tuple(None for colum in range(self.table.columnCount()))
        self.addRow(*[QtWidgets.QTableWidgetItem() for colum in range(self.table.columnCount())])
        self.addTriggered.emit(item)

    def __triggerRemove(self):
        item = tuple(self.table.item(self.table.currentRow(), column) for column in range(self.table.columnCount()))
        self.table.removeRow(self.table.currentRow())
        self.removeTriggered.emit(item)

    def __changeCurrentRow(self, currentRow, previousRow):
        if currentRow != previousRow and previousRow >= 0:
            item = tuple(self.table.item(previousRow, column) for column in range(self.table.columnCount()))
            self.editTriggered.emit(item)
        self.removeButton.setEnabled(self.table.currentRow() >= 0)

    def addColumn(self, item):
        self.table.addColumn(item)

    def addRow(self, *argv):
        self.table.addRow(*argv)

    def items(self):
        items = list()
        for row in range(self.table.rowCount()):
            items.append(tuple(self.table.item(row, column) for column in range(self.table.columnCount())))
        return items

    def clear(self):
        for row in range(self.table.rowCount()):
            self.table.removeRow(row)

    def clearSelection(self):
        self.table.clearSelection()
        self.table.setCurrentItem(None)