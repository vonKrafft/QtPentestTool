# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtWidgets


class QTableGroupBox(QtWidgets.QWidget):
    """Table group box for QtPentestTool.

    Signals:
        addClicked (QtCore.pyqtSignal)
        editTriggered (QtCore.pyqtSignal)
        removeClicked (QtCore.pyqtSignal)

    """

    """ SIGNAL emitted when the 'add' button is clicked """
    addClicked = QtCore.pyqtSignal(object)

    """ SIGNAL emitted when a row is edited """
    editTriggered = QtCore.pyqtSignal(object)

    """ SIGNAL emitted when the 'remove' button is clicked """
    removeClicked = QtCore.pyqtSignal(object)

    def __init__(self, *args, **kwargs) -> None:
        """ Class constructor.

        Args:
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        """
        super(QTableGroupBox, self).__init__(*args, **kwargs)

        self.layout = QtWidgets.QGridLayout()
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.setLayout(self.layout)
        self.setMinimumWidth(500)

        self.table = QtPtWidgets.QTableEdit(self)
        self.table.currentRowChanged.connect(self.__changeCurrentRow)

        self.buttonBox = QtWidgets.QDialogButtonBox(QtCore.Qt.Vertical)

        self.addButton = QtWidgets.QPushButton(QtGui.QIcon.fromTheme('list-add'), 'Add', self)
        self.addButton.clicked[bool].connect(self.__clickAdd)
        self.buttonBox.addButton(self.addButton, QtWidgets.QDialogButtonBox.ActionRole)

        self.removeButton = QtWidgets.QPushButton(QtGui.QIcon.fromTheme('list-remove'), 'Remove', self)
        self.removeButton.clicked[bool].connect(self.__clickRemove)
        self.buttonBox.addButton(self.removeButton, QtWidgets.QDialogButtonBox.ActionRole)

        self.layout.addWidget(self.table, 1, 0)
        self.layout.addWidget(self.buttonBox, 1, 1)

    def paintEvent(self, event: 'QtGui.QPaintEvent') -> None:
        """ Handle the paint evant for the current widget.

        Args:
            event (QtGui.QPaintEvent): The handled event

        """
        self.removeButton.setEnabled(self.table.currentRow() >= 0)
        QtWidgets.QWidget.paintEvent(self, event)
    
    def __clickAdd(self) -> None:
        """ Emit 'addClicked' SIGNAL.

        """
        item = tuple(None for colum in range(self.table.columnCount()))
        self.addRow(*[QtWidgets.QTableWidgetItem() for colum in range(self.table.columnCount())])
        self.addClicked.emit(item)

    def __clickRemove(self) -> None:
        """ Emit 'removeClicked' SIGNAL.

        """
        item = tuple(self.table.item(self.table.currentRow(), column) for column in range(self.table.columnCount()))
        self.table.removeRow(self.table.currentRow())
        self.removeClicked.emit(item)

    def __changeCurrentRow(self, currentRow: int, previousRow: int) -> None:
        """ Emit 'editTriggered' SIGNAL if the current and the previous rows differ.

        Args:
            currentRow (QtWidgets.QTableWidgetItem): The current selected row
            previousRow (QtWidgets.QTableWidgetItem): The previous selected row

        """
        if currentRow != previousRow and previousRow >= 0:
            item = tuple(self.table.item(previousRow, column) for column in range(self.table.columnCount()))
            self.editTriggered.emit(item)
        self.removeButton.setEnabled(self.table.currentRow() >= 0)

    def addColumn(self, heading: 'QtWidgets.QTableWidgetItem') -> None:
        """ Add a new column in the current table

        Args:
            item (QtWidgets.QTableWidgetItem): The heading cell for the column

        """
        self.table.addColumn(heading)

    def addRow(self, *cells: ['QtWidgets.QTableWidgetItem']) -> None:
        """ Add a new row in the current table

        Args:
            cells ([QtWidgets.QTableWidgetItem]): The cells of the new row

        """
        self.table.addRow(*cells)

    def items(self) -> [tuple]:
        """ Get all the rows as a list of tuples.

        Returns:
            [tuple]: The rows of the current table

        """
        items = list()
        for row in range(self.table.rowCount()):
            items.append(tuple(self.table.item(row, column) for column in range(self.table.columnCount())))
        return items

    def clear(self) -> None:
        """ Remove all rows from the current table.

        """
        for row in range(self.table.rowCount()):
            self.table.removeRow(row)

    def clearSelection(self) -> None:
        """ Clear the selection of the table.

        """
        self.table.clearSelection()
        self.table.setCurrentItem(None)