# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtWidgets

from .. import QtPtWidgets

import shutil


class QSettingsDialog(QtWidgets.QDialog):

    _settings = QtCore.QSettings('QtPentestTool', 'QtPtApp')

    def __init__(self, *args, **kwargs):
        super(QSettingsDialog, self).__init__(*args, **kwargs)

        self.setWindowModality(QtCore.Qt.ApplicationModal)
        print(self._settings.fileName())

        # Global

        self.globalGroupBox = QtWidgets.QGroupBox('Project\'s Preferences')
        self.globalFormLayout = QtWidgets.QFormLayout()
        self.globalFormLayout.setLabelAlignment(QtCore.Qt.AlignLeft)
        self.globalGroupBox.setMinimumWidth(500)
        self.globalGroupBox.setLayout(self.globalFormLayout)

        self.globalWorkdirInput = QtPtWidgets.QDirectoryPathBox()
        self.globalFormLayout.addRow(QtWidgets.QLabel('Working directory'), self.globalWorkdirInput)

        self.globalArchiveInput = QtWidgets.QComboBox()
        self.globalArchiveInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.globalArchiveInput.addItems([f[0] for f in shutil.get_archive_formats()])
        self.globalFormLayout.addRow(QtWidgets.QLabel('Archive format'), self.globalArchiveInput)

        self.globalDelayInput = QtWidgets.QSpinBox(minimum=0, maximum=60, suffix=' seconds')
        self.globalDelayInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.globalFormLayout.addRow(QtWidgets.QLabel('Screenshot delay'), self.globalDelayInput)
        
        self.globalCvssInput = QtWidgets.QSpinBox(minimum=2, maximum=3)
        self.globalCvssInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.globalFormLayout.addRow(QtWidgets.QLabel('CVSS version'), self.globalCvssInput)

        # Buttons

        self.buttonBox = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

        # QSettingsDialog
         
        self.mainLayout = QtWidgets.QVBoxLayout()
        self.mainLayout.addWidget(self.globalGroupBox)
        self.mainLayout.addWidget(self.buttonBox)

        self.setLayout(self.mainLayout)

    def show(self):
        return self.exec_()

    def exec_(self):
        ret = super(QSettingsDialog, self).exec_()
        return self._settings, bool(ret)

    def setWindowTitle(self, dialogTitle, appTitle = None):
        appTitle = ' - {}'.format(appTitle or '') if len(appTitle or '') > 0 else ''
        super(QSettingsDialog, self).setWindowTitle('{}{}'.format(dialogTitle, appTitle))

    def openPreferences(self, appTitle = None):
        self.setWindowTitle('Preferences', appTitle)

        self.globalWorkdirInput.setText(str(self._settings.value('global/workdir', QtCore.QDir.homePath())))
        self.globalArchiveInput.setCurrentIndex(self.globalArchiveInput.findText(self._settings.value('global/archive', 'tar')))
        self.globalDelayInput.setValue(min(max(int(self._settings.value('global/delay', 5)), 0), 60))
        self.globalCvssInput.setValue(min(max(int(self._settings.value('global/cvss_version', 3)), 2), 3))

        return self.show()

    def accept(self):

        self._settings.setValue('global/workdir', self.globalWorkdirInput.text())
        self._settings.setValue('global/archive', self.globalArchiveInput.currentText())
        self._settings.setValue('global/delay', self.globalDelayInput.value())
        self._settings.setValue('global/cvss_version', self.globalCvssInput.value())

        super(QSettingsDialog, self).accept()

