# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtWidgets

from .. import QtPtObjects


class QSettingsDialog(QtWidgets.QDialog):

    settings = QtPtObjects.QSettings()

    def __init__(self, *args, **kwargs):
        super(QSettingsDialog, self).__init__(*args, **kwargs)

        self.setWindowModality(QtCore.Qt.ApplicationModal)

        self.settingsGroupBox = QtWidgets.QGroupBox('Preferences')
        self.settingsFormLayout = QtWidgets.QFormLayout()
        self.settingsFormLayout.setLabelAlignment(QtCore.Qt.AlignLeft)
        self.settingsGroupBox.setMinimumWidth(500)
        self.settingsGroupBox.setLayout(self.settingsFormLayout)

        self.formInputs = dict()

        self.buttonBox = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
         
        self.mainLayout = QtWidgets.QVBoxLayout()
        self.mainLayout.addWidget(self.settingsGroupBox)
        self.mainLayout.addWidget(self.buttonBox)

        self.setLayout(self.mainLayout)

    def show(self):
        return self.exec_()

    def exec_(self):
        ret = super(QSettingsDialog, self).exec_()
        return self.settings, bool(ret)

    def setWindowTitle(self, dialogTitle, appTitle = None):
        appTitle = ' - {}'.format(appTitle or '') if len(appTitle or '') > 0 else ''
        super(QSettingsDialog, self).setWindowTitle('{}{}'.format(dialogTitle, appTitle))

    def setSettings(self, settings):
        self.settings = settings

    def openPreferences(self, settings, appTitle = None):
        self.setWindowTitle('Preferences', appTitle)

        self.setSettings(settings)

        for i in reversed(range(self.settingsFormLayout.count())):
            self.settingsFormLayout.itemAt(i).widget().setParent(None)

        self.formInputs = dict()
        for key, value in self.settings.items():
            if isinstance(QtPtObjects.QSettings.input(key), tuple) and len(QtPtObjects.QSettings.input(key)) >= 2:
                formInput = QtWidgets.QSpinBox()
                formInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
                formInput.setMinimum(QtPtObjects.QSettings.input(key)[0])
                formInput.setMaximum(QtPtObjects.QSettings.input(key)[1])
                formInput.setSuffix(QtPtObjects.QSettings.input(key)[2] if len(QtPtObjects.QSettings.input(key)) > 2 else None)
                formInput.setValue(min(max(int(value), QtPtObjects.QSettings.input(key)[0]), QtPtObjects.QSettings.input(key)[1]))
            elif isinstance(QtPtObjects.QSettings.input(key), list):
                formInput = QtWidgets.QComboBox()
                formInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
                formInput.addItems(QtPtObjects.QSettings.input(key))
                formInput.setCurrentIndex(formInput.findText(value))
            else:
                formInput = QtWidgets.QLineEdit()
                formInput.setText(str(value or ''))
            self.settingsFormLayout.addRow(QtWidgets.QLabel(QtPtObjects.QSettings.label(key)), formInput)
            self.formInputs[key] = formInput

        return self.show()

    def accept(self):
        for key, formInput in getattr(self, 'formInputs', dict()).items():
            if isinstance(formInput, QtWidgets.QSpinBox):
                self.settings.set(key, formInput.value())
            if isinstance(formInput, QtWidgets.QComboBox):
                self.settings.set(key, formInput.currentText())
            if isinstance(formInput, QtWidgets.QLineEdit):
                self.settings.set(key, formInput.text())
        self.settings.dump()
        super(QSettingsDialog, self).accept()

