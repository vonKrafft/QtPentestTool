# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtCore
from .. import QtPtWidgets


class QScoreWidget(QtWidgets.QWidget):

    nbCritical = 0
    nbHigh = 0
    nbMedium = 0
    nbLow = 0
    nbNone = 0
    nbOther = 0

    def __init__(self, *argv, **kwargs):      
        super(QScoreWidget, self).__init__()
        self.setNbVuln(*argv, **kwargs)
        self.setMinimumSize(1, 20)

    def count(self):
        return self.nbCritical + self.nbHigh + self.nbMedium + self.nbLow + self.nbNone + self.nbOther

    def setNbVuln(self, *argv, **kwargs):
        self.nbCritical = max(int(kwargs.get('critical', 0)), 0)
        self.nbHigh = max(int(kwargs.get('high', 0)), 0)
        self.nbMedium = max(int(kwargs.get('medium', 0)), 0)
        self.nbLow = max(int(kwargs.get('low', 0)), 0)
        self.nbNone = max(int(kwargs.get('none', 0)), 0)
        self.nbOther = max(int(kwargs.get('n/a', 0)), 0)
        self.nbVuln = self.count()
        self.update()

    def setNbCritical(self, value):
        self.nbCritical = max(int(value), 0)
        self.nbVuln = max(self.nbVuln, self.count())
        self.update()

    def setNbHigh(self, value):
        self.nbHigh = max(int(value), 0)
        self.nbVuln = max(self.nbVuln, self.count())
        self.update()

    def setNbMedium(self, value):
        self.nbMedium = max(int(value), 0)
        self.nbVuln = max(self.nbVuln, self.count())
        self.update()

    def setNbLow(self, value):
        self.nbLow = max(int(value), 0)
        self.nbVuln = max(self.nbVuln, self.count())
        self.update()

    def setNbNone(self, value):
        self.nbNone = max(int(value), 0)
        self.nbVuln = max(self.nbVuln, self.count())
        self.update()

    def setNbOther(self, value):
        self.nbOther = max(int(value), 0)
        self.nbVuln = max(self.nbVuln, self.count())
        self.update()

    def paintEvent(self, e):
        qp = QtGui.QPainter()
        qp.begin(self)
        self.drawWidget(qp)
        qp.end()

    def drawWidget(self, qp):
        qp.setFont(QtGui.QFont('SansSerif', 8))

        w = self.size().width()
        h = self.size().height()

        self.nbVuln = max(self.nbVuln, self.count(), 0)
        step = int(round(w / self.nbVuln)) if self.nbVuln > 0 else w
        pos, remainingVulns = 0, self.nbVuln

        if self.nbVuln == 0:
            barColor = QtGui.QColor(QtPtCore.QtPt.DefaultColor)
            pos = self.drawBar(qp, 0, w, h, 'No vulnerability yet ...', barColor)

        if self.nbNone > 0:
            barWidth = step * self.nbNone if remainingVulns > self.nbNone else w - pos
            barText = '{} {}'.format(self.nbNone, QtPtCore.QtPt.NoneRating)
            barColor = QtGui.QColor(QtPtCore.QtPt.NoneColor)
            pos = self.drawBar(qp, pos, barWidth, h, barText, barColor)
        remainingVulns -= self.nbNone

        if self.nbLow > 0:
            barWidth = step * self.nbLow if remainingVulns > self.nbLow else w - pos
            barText = '{} {}'.format(self.nbLow, QtPtCore.QtPt.LowRating)
            barColor = QtGui.QColor(QtPtCore.QtPt.LowColor)
            pos = self.drawBar(qp, pos, barWidth, h, barText, barColor)
        remainingVulns -= self.nbLow

        if self.nbMedium > 0:
            barWidth = step * self.nbMedium if remainingVulns > self.nbMedium else w - pos
            barText = '{} {}'.format(self.nbMedium, QtPtCore.QtPt.MediumRating)
            barColor = QtGui.QColor(QtPtCore.QtPt.MediumColor)
            pos = self.drawBar(qp, pos, barWidth, h, barText, barColor)
        remainingVulns -= self.nbMedium

        if self.nbHigh > 0:
            barWidth = step * self.nbHigh if remainingVulns > self.nbHigh else w - pos
            barText = '{} {}'.format(self.nbHigh, QtPtCore.QtPt.HighRating)
            barColor = QtGui.QColor(QtPtCore.QtPt.HighColor)
            pos = self.drawBar(qp, pos, barWidth, h, barText, barColor)
        remainingVulns -= self.nbHigh

        if self.nbCritical > 0:
            barWidth = step * self.nbCritical if remainingVulns > self.nbCritical else w - pos
            barText = '{} {}'.format(self.nbCritical, QtPtCore.QtPt.CriticalRating)
            barColor = QtGui.QColor(QtPtCore.QtPt.CriticalColor)
            pos = self.drawBar(qp, pos, barWidth, h, barText, barColor)
        remainingVulns -= self.nbCritical

        if remainingVulns > 0:
            barText = '{} {}'.format(remainingVulns, QtPtCore.QtPt.DefaultRating)
            barColor = QtGui.QColor(QtPtCore.QtPt.DefaultColor)
            pos = self.drawBar(qp, pos, w - pos, h, barText, barColor)

    def drawBar(self, qp, start, w, h, text, background = QtGui.QColor(102, 102, 102), foreground = QtGui.QColor(255, 255, 255)):
        qp.setPen(background)
        qp.setBrush(background)
        qp.drawRect(start, 0, w, h)

        qp.setPen(QtGui.QPen(foreground, 1, QtCore.Qt.SolidLine))
        qp.setBrush(QtCore.Qt.NoBrush)
        qp.setFont(QtGui.QFont('SansSerif', 8))
        qp.drawText(start + (w - qp.fontMetrics().width(text)) / 2, (h + 8) / 2, text)

        return start + w
