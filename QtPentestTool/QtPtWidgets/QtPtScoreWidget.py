# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtCore
from .. import QtPtWidgets


class QScoreWidget(QtWidgets.QWidget):
    """Project widget for QtPentestTool.

    Attributes:
        nbCritical (int): Number of critical vulnerabilities
        nbHigh (int): Number of high vulnerabilities
        nbMedium (int): Number of medium vulnerabilities
        nbLow (int): Number of low vulnerabilities
        nbNone (int): Number of neutral vulnerabilities
        nbOther (int): Number of unclassified vulnerabilities
        nbVuln (int): Total number of vulnerabilities 

    """

    """ Number of critical vulnerabilities (default 0) """
    nbCritical = 0

    """ Number of high vulnerabilities (default 0) """
    nbHigh = 0

    """ Number of medium vulnerabilities (default 0) """
    nbMedium = 0

    """ Number of low vulnerabilities (default 0) """
    nbLow = 0

    """ Number of neutral vulnerabilities (default 0) """
    nbNone = 0

    """ Number of unclassified vulnerabilities (default 0) """
    nbOther = 0

    def __init__(self, *argv, **kwargs) -> None:
        """ Class constructor.

        Args:
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        """
        super(QScoreWidget, self).__init__()
        self.setNbVuln(*argv, **kwargs)
        self.setMinimumSize(1, 20)

    def count(self) -> int:
        """ Get the total number of vulnerabilities.

        Returns:
            int: The number of vulnerabilities

        """
        return self.nbCritical + self.nbHigh + self.nbMedium + self.nbLow + self.nbNone + self.nbOther

    def setNbVuln(self, *argv, **kwargs) -> None:
        """ Setter for vulnerabilities counters

        Args:
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        Kwargs:
            critical (int, optional): Number of critical vulnerabilities (default 0)
            high (int, optional): Number of high vulnerabilities (default 0)
            medium (int, optional): Number of medium vulnerabilities (default 0)
            low (int, optional): Number of low vulnerabilities (default 0)
            none (int, optional): Number of neutral vulnerabilities (default 0)
            n/a (int, optional): Number of unclassified vulnerabilities (default 0)

        """
        self.nbCritical = max(int(kwargs.get('critical', 0)), 0)
        self.nbHigh = max(int(kwargs.get('high', 0)), 0)
        self.nbMedium = max(int(kwargs.get('medium', 0)), 0)
        self.nbLow = max(int(kwargs.get('low', 0)), 0)
        self.nbNone = max(int(kwargs.get('none', 0)), 0)
        self.nbOther = max(int(kwargs.get('n/a', 0)), 0)
        self.nbVuln = self.count()
        self.update()

    def setNbCritical(self, value: int) -> None:
        """ Setter for nbCritical.

        Args:
            value (int): The value to set

        """
        self.nbCritical = max(int(value), 0)
        self.nbVuln = max(self.nbVuln, self.count())
        self.update()

    def setNbHigh(self, value: int) -> None:
        """ Setter for nbHigh.

        Args:
            value (int): The value to set

        """
        self.nbHigh = max(int(value), 0)
        self.nbVuln = max(self.nbVuln, self.count())
        self.update()

    def setNbMedium(self, value: int) -> None:
        """ Setter for nbMedium.

        Args:
            value (int): The value to set

        """
        self.nbMedium = max(int(value), 0)
        self.nbVuln = max(self.nbVuln, self.count())
        self.update()

    def setNbLow(self, value: int) -> None:
        """ Setter for nbLow.

        Args:
            value (int): The value to set

        """
        self.nbLow = max(int(value), 0)
        self.nbVuln = max(self.nbVuln, self.count())
        self.update()

    def setNbNone(self, value: int) -> None:
        """ Setter for nbNone.

        Args:
            value (int): The value to set

        """
        self.nbNone = max(int(value), 0)
        self.nbVuln = max(self.nbVuln, self.count())
        self.update()

    def setNbOther(self, value: int) -> None:
        """ Setter for nbOther.

        Args:
            value (int): The value to set

        """
        self.nbOther = max(int(value), 0)
        self.nbVuln = max(self.nbVuln, self.count())
        self.update()

    def paintEvent(self, event: 'QtGui.QPaintEvent') -> None:
        """ Handle the paint evant for the current widget.

        Args:
            event (QtGui.QPaintEvent): The handled event

        """
        qp = QtGui.QPainter()
        qp.begin(self)
        self.drawWidget(qp)
        qp.end()

    def drawWidget(self, qp: 'QtGui.QPainter') -> None:
        """ Draw the widget.

        Args:
            qp (QtGui.QPainter): A QPainter object to draw the widget

        """
        qp.setFont(QtGui.QFont('SansSerif', 8))

        w = self.size().width()
        h = self.size().height()

        self.nbVuln = max(self.nbVuln, self.count(), 0)
        step = int(round(w / self.nbVuln)) if self.nbVuln > 0 else w
        pos, remainingVulns = 0, self.nbVuln

        if self.nbVuln == 0:
            barColor = QtGui.QColor(QtPtCore.QtPt.DefaultColor)
            pos = self.drawBar(qp, 0, w, h, 'No vulnerability yet ...', barColor)

        if self.nbNone > 0:
            barWidth = step * self.nbNone if remainingVulns > self.nbNone else w - pos
            barText = f'{self.nbNone} {QtPtCore.QtPt.NoneRating}'
            barColor = QtGui.QColor(QtPtCore.QtPt.NoneColor)
            pos = self.drawBar(qp, pos, barWidth, h, barText, barColor)
        remainingVulns -= self.nbNone

        if self.nbLow > 0:
            barWidth = step * self.nbLow if remainingVulns > self.nbLow else w - pos
            barText = f'{self.nbLow} {QtPtCore.QtPt.LowRating}'
            barColor = QtGui.QColor(QtPtCore.QtPt.LowColor)
            pos = self.drawBar(qp, pos, barWidth, h, barText, barColor)
        remainingVulns -= self.nbLow

        if self.nbMedium > 0:
            barWidth = step * self.nbMedium if remainingVulns > self.nbMedium else w - pos
            barText = f'{self.nbMedium} {QtPtCore.QtPt.MediumRating}'
            barColor = QtGui.QColor(QtPtCore.QtPt.MediumColor)
            pos = self.drawBar(qp, pos, barWidth, h, barText, barColor)
        remainingVulns -= self.nbMedium

        if self.nbHigh > 0:
            barWidth = step * self.nbHigh if remainingVulns > self.nbHigh else w - pos
            barText = f'{self.nbHigh} {QtPtCore.QtPt.HighRating}'
            barColor = QtGui.QColor(QtPtCore.QtPt.HighColor)
            pos = self.drawBar(qp, pos, barWidth, h, barText, barColor)
        remainingVulns -= self.nbHigh

        if self.nbCritical > 0:
            barWidth = step * self.nbCritical if remainingVulns > self.nbCritical else w - pos
            barText = f'{self.nbCritical} {QtPtCore.QtPt.CriticalRating}'
            barColor = QtGui.QColor(QtPtCore.QtPt.CriticalColor)
            pos = self.drawBar(qp, pos, barWidth, h, barText, barColor)
        remainingVulns -= self.nbCritical

        if remainingVulns > 0:
            barText = f'{remainingVulns} {QtPtCore.QtPt.DefaultRating}'
            barColor = QtGui.QColor(QtPtCore.QtPt.DefaultColor)
            pos = self.drawBar(qp, pos, w - pos, h, barText, barColor)

    def drawBar(self, qp: 'QtGui.QPainter', start: int, w: int, h: int, text: str, bg: 'QtGui.QColor' = QtGui.QColor(102, 102, 102), fg: 'QtGui.QColor' = QtGui.QColor(255, 255, 255)) -> int:
        """ Draw a bar.

        Args:
            qp (QtGui.QPainter): A QPainter object to draw the bar
            start (int): The position of the beginning of the bar
            w (int): The width of the bar
            h (int): The height of the bar
            text (str): The text to display in the bar
            bg (QtGui.QColor, optional): Background color (default #666)
            fg (QtGui.QColor, optional): Foreground color (default #fff)

        Returns:
            int: The position of the end of the bar

        """
        qp.setPen(bg)
        qp.setBrush(bg)
        qp.drawRect(start, 0, w, h)

        qp.setPen(QtGui.QPen(fg, 1, QtCore.Qt.SolidLine))
        qp.setBrush(QtCore.Qt.NoBrush)
        qp.setFont(QtGui.QFont('SansSerif', 8))
        qp.drawText(start + (w - qp.fontMetrics().width(text)) / 2, (h + 8) / 2, text)

        return start + w