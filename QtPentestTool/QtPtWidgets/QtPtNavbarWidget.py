# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtObjects
from .. import QtPtWidgets


class QNavbarWidget(QtWidgets.QWidget):
    """Navbar widget for QtPentestTool.

    Attributes:
        layout (QtWidgets.QGridLayout): Current widget's layout

        listWidget (QtWidgets.QListWidget)

    Signals:
        currentItemChanged (QtCore.pyqtSignal)
        currentItemUnset (QtCore.pyqtSignal)

    """

    """ SIGNAL emitted when the current navbar item is changed """
    currentItemChanged = QtCore.pyqtSignal(QtPtObjects.QVulnerability)

    """ SIGNAL emitted when the current navbar item is unset """
    currentItemUnset = QtCore.pyqtSignal()

    def __init__(self, *args, **kwargs) -> None:
        """ Class constructor.

        Args:
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        """
        super(QNavbarWidget, self).__init__(*args, **kwargs)

        self.layout = QtWidgets.QVBoxLayout()
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.setLayout(self.layout)

        # Table

        self.listWidget = QtWidgets.QListWidget(self)
        self.listWidget.setFocusPolicy(QtCore.Qt.NoFocus)
        self.listWidget.currentItemChanged.connect(self.__changeCurrentItem)

        # QNavbarWidget

        self.layout.addWidget(self.listWidget, 0)

    def __changeCurrentItem(self, current: 'QtWidgets.QListWidgetItem', previous: 'QtWidgets.QListWidgetItem') -> None:
        """ If the current item is a QListWidgetItem, emit 'currentItemChanged' 
        SIGNAL, otherwise emit 'currentItemUnset' SIGNAL.

        Args:
            current (QtWidgets.QListWidgetItem): The current selected item
            previous (QtWidgets.QListWidgetItem): The previous selected item

        """
        if isinstance(current, QtWidgets.QListWidgetItem):
            current.setSelected(True)
            self.currentItemChanged.emit(self.listWidget.itemWidget(current).getVulnerability())
        else:
            self.currentItemUnset.emit()

    def setItems(self, vulnerabilities: ['QtPtObjects.QVulnerability'], current: 'QtPtObjects.QVulnerability' = None) -> None:
        """ Set multiple items to the vulnerabilities list widget.

        Args:
            vulnerabilities ([QtPtObjects.QVulnerability]): A list of vulnerabilities
            current (QtPtObjects.QVulnerability, optional): The current vulnerability to select (default None)

        """
        self.listWidget.clear()

        sanitizedVulnerabilities = [v for v in vulnerabilities if isinstance(v, QtPtObjects.QVulnerability)]
        sanitizedVulnerabilities = sorted(sanitizedVulnerabilities, key=lambda v: str(v).lower(), reverse=True)

        for vuln in sanitizedVulnerabilities:
            self.addItem(vuln)

        if isinstance(current, QtPtObjects.QVulnerability):
            self.setCurrentItem(current)
        elif len(sanitizedVulnerabilities) > 0:
            self.setCurrentIndex(0)

    def addItem(self, vulnerability: 'QtPtObjects.QVulnerability' = None) -> None:
        """ Add an item to the vulnerabilities list widget.

        Args:
            vulnerability (QtPtObjects.QVulnerability, optional): The vulnerability to add (default None)

        """
        navbarItemWidget = QtPtWidgets.QNavbarItemWidget(vulnerability)
        listWidgetItem = QtWidgets.QListWidgetItem(self.listWidget)
        listWidgetItem.setSizeHint(navbarItemWidget.sizeHint())

        self.listWidget.addItem(listWidgetItem)
        self.listWidget.setItemWidget(listWidgetItem, navbarItemWidget)

    def updateItem(self, vulnerability: 'QtPtObjects.QVulnerability') -> None:
        """ Update the item identify by the given vulnerability.

        Args:
            vulnerability (QtPtObjects.QVulnerability): The vulnerability to update

        """
        if vulnerability is not None:
            searched = self.itemFromVulnerability(vulnerability)
            if isinstance(searched, QtWidgets.QListWidgetItem):
                self.listWidget.itemWidget(searched).setVulnerability(vulnerability)

    def setCurrentItem(self, vulnerability: 'QtPtObjects.QVulnerability') -> None:
        """ Set the current item identify by the given vulnerability.

        Args:
            vulnerability (QtPtObjects.QVulnerability): The vulnerability to set as current

        """
        self.listWidget.setCurrentItem(self.itemFromVulnerability(vulnerability))

    def setCurrentIndex(self, index: int) -> None:
        """ Set the current item identify by the given index.

        Args:
            index (int): The index to set as current

        """
        if self.listWidget.count() > 0:
            index = min(max(index, 0), self.listWidget.count() - 1)
            self.listWidget.setCurrentItem(self.listWidget.item(index))

    def itemFromVulnerability(self, vulnerability: 'QtPtObjects.QVulnerability') -> 'QtWidgets.QListWidgetItem':
        """ Get the item identify by the given vulnerability.

        Args:
            vulnerability (QtPtObjects.QVulnerability): The vulnerability to retrieve

        """
        for row in range(self.listWidget.count()):
            if self.listWidget.itemWidget(self.listWidget.item(row)).getVulnerability() == vulnerability:
                return self.listWidget.item(row)
        return None