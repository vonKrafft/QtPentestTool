# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtObjects
from .. import QtPtWidgets


class QNavbarWidget(QtWidgets.QWidget):
    """docstring for QNavbarWidget"""

    addClicked = QtCore.pyqtSignal()
    saveClicked = QtCore.pyqtSignal(QtPtObjects.QVulnerability)
    removeClicked = QtCore.pyqtSignal(QtPtObjects.QVulnerability)
    currentItemChanged = QtCore.pyqtSignal(QtPtObjects.QVulnerability)
    currentItemUnset = QtCore.pyqtSignal()

    def __init__(self, *args, **kwargs):
        super(QNavbarWidget, self).__init__(*args, **kwargs)

        self.layout = QtWidgets.QVBoxLayout()
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.setLayout(self.layout)

        # Buttons

        self.buttonsLayout = QtWidgets.QGridLayout()
        self.buttonsLayout.setContentsMargins(0, 0, 0, 0)

        self.buttonsWidget = QtWidgets.QWidget(objectName='buttonsNavbarWidget')
        self.buttonsWidget.setLayout(self.buttonsLayout)

        self.newButton = QtWidgets.QPushButton(QtGui.QIcon.fromTheme('list-add'), 'Add', self)
        self.newButton.clicked[bool].connect(self.__addItem)
        self.newButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.newButton.setStatusTip('Add a new vulnerability')
        self.buttonsLayout.addWidget(self.newButton, 0, 1)

        self.saveButton = QtWidgets.QPushButton(QtGui.QIcon.fromTheme('document-save'), 'Save', self, enabled=False)
        self.saveButton.clicked[bool].connect(self.__saveVulnerability)
        self.saveButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.saveButton.setStatusTip('Save the selected vulnerability')
        self.buttonsLayout.addWidget(self.saveButton, 0, 2)

        self.removeButton = QtWidgets.QPushButton(QtGui.QIcon.fromTheme('list-remove'), 'Remove', self, enabled=False)
        self.removeButton.clicked[bool].connect(self.__removeVulnerability)
        self.removeButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.removeButton.setStatusTip('Remove the selected vulnerability')
        self.buttonsLayout.addWidget(self.removeButton, 0, 3)

        # Table

        self.listWidget = QtWidgets.QListWidget(self)
        self.listWidget.setFocusPolicy(QtCore.Qt.NoFocus)
        self.listWidget.currentItemChanged.connect(self.__switchVulnerability)

        # QNavbarWidget

        self.layout.addWidget(self.buttonsWidget, 0)
        self.layout.addWidget(self.listWidget, 1)

    def setVisible(self, visible = True):
        self.buttonsWidget.setVisible(True)
        self.newButton.setEnabled(visible)
        self.saveButton.setEnabled(visible)
        self.removeButton.setEnabled(visible)
        self.listWidget.setVisible(True)
        super(QNavbarWidget, self).setVisible(True)

    def paintEvent(self, e):
        self.saveButton.setEnabled(self.listWidget.count() > 0)
        self.removeButton.setEnabled(self.listWidget.count() > 0)

    def __addItem(self):
        self.addClicked.emit()

    def __saveVulnerability(self):
        current = self.listWidget.currentItem()
        c = self.listWidget.itemWidget(current).getVulnerability() if isinstance(current, QtWidgets.QListWidgetItem) else None
        if isinstance(current, QtWidgets.QListWidgetItem):
            currentVuln = self.listWidget.itemWidget(current).getVulnerability()
            self.saveClicked.emit(currentVuln)

    def __removeVulnerability(self):
        current = self.listWidget.currentItem()
        c = self.listWidget.itemWidget(current).getVulnerability() if isinstance(current, QtWidgets.QListWidgetItem) else None
        if isinstance(current, QtWidgets.QListWidgetItem):
            currentVuln = self.listWidget.itemWidget(current).getVulnerability()
            self.removeClicked.emit(currentVuln)

    def __switchVulnerability(self, current, previous):
        c = self.listWidget.itemWidget(current).getVulnerability() if isinstance(current, QtWidgets.QListWidgetItem) else None
        p = self.listWidget.itemWidget(previous).getVulnerability() if isinstance(previous, QtWidgets.QListWidgetItem) else None
        if isinstance(current, QtWidgets.QListWidgetItem):
            current.setSelected(True)
            self.currentItemChanged.emit(self.listWidget.itemWidget(current).getVulnerability())
        else:
            self.currentItemUnset.emit()

    def setItems(self, vulnerabilities, current = None):
        self.listWidget.clear()

        sanitizedVulnerabilities = [v for v in vulnerabilities if isinstance(v, QtPtObjects.QVulnerability)]
        sanitizedVulnerabilities = sorted(sanitizedVulnerabilities, key=lambda v: str(v).lower(), reverse=True)

        for vuln in sanitizedVulnerabilities:
            self.addItem(vuln)

        if isinstance(current, QtPtObjects.QVulnerability):
            self.setCurrentItem(current)
        elif len(sanitizedVulnerabilities) > 0:
            self.setCurrentRow(0)

    def addItem(self, vulnerability = None):
        navbarItemWidget = QtPtWidgets.QNavbarItemWidget(vulnerability)
        listWidgetItem = QtWidgets.QListWidgetItem(self.listWidget)
        listWidgetItem.setSizeHint(navbarItemWidget.sizeHint())

        self.listWidget.addItem(listWidgetItem)
        self.listWidget.setItemWidget(listWidgetItem, navbarItemWidget)

    def updateItem(self, vulnerability):
        if vulnerability is not None:
            searched = self.itemFromVulnerability(vulnerability)
            if isinstance(searched, QtWidgets.QListWidgetItem):
                self.listWidget.itemWidget(searched).setVulnerability(vulnerability)

    def setCurrentItem(self, vulnerability):
        self.listWidget.setCurrentItem(self.itemFromVulnerability(vulnerability))

    def setCurrentRow(self, row):
        if self.listWidget.count() > 0:
            row = min(max(row, 0), self.listWidget.count() - 1)
            self.listWidget.setCurrentItem(self.listWidget.item(row))

    def itemFromVulnerability(self, vulnerability):
        for row in range(self.listWidget.count()):
            if self.listWidget.itemWidget(self.listWidget.item(row)).getVulnerability() == vulnerability:
                return self.listWidget.item(row)
        return None
