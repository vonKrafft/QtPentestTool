# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtObjects
from .. import QtPtWidgets


class QProjectDialog(QtWidgets.QDialog):
    """Project dialog for QtPentestTool.

    Attributes:
        _project (QtPtObjects.QProject): Project object linked to the dialog
        _workdir (str): The current project's working directory

        layout (QtWidgets.QFormLayout): Current dialog's layout

        projNameLabel (QtWidgets.QLabel)
        projNameInput (QtWidgets.QLineEdit)
        projClientLabel (QtWidgets.QLabel)
        projClientInput (QtWidgets.QLineEdit)
        projDateLabel (QtWidgets.QLabel)
        projDateInput (QtWidgets.QLineEdit)
        projCvssLabel (QtWidgets.QLabel)
        projCvssInput (QtWidgets.QSpinBox)
        targetList (QtPtWidgets.QTableGroupBox)
        accountList (QtPtWidgets.QTableGroupBox)
        buttonBox (QtWidgets.QDialogButtonBox)

    """

    """ Project object linked to the dialog """
    _project = None

    """ The current project's working directory """
    _workdir = None

    def __init__(self, *args, **kwargs) -> None:
        """ Class constructor.

        Args:
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        """
        super(QProjectDialog, self).__init__(*args, **kwargs)
        self.setWindowModality(QtCore.Qt.ApplicationModal)

        self.layout = QtWidgets.QFormLayout()
        self.setLayout(self.layout)

        # Project

        self.projNameLabel = QtWidgets.QLabel('Name')
        self.projNameInput = QtWidgets.QLineEdit()
        self.projNameInput.setPlaceholderText('The project\'s name has to be provided.')
        self.projNameInput.setValidator(QtGui.QRegExpValidator(QtCore.QRegExp('^.+$')))
        self.projNameInput.textChanged.connect(self.__checkFormValidators)

        self.projClientLabel = QtWidgets.QLabel('Client')
        self.projClientInput = QtWidgets.QLineEdit()
        self.projClientInput.setPlaceholderText('The project\'s client has to be provided.')
        self.projClientInput.setValidator(QtGui.QRegExpValidator(QtCore.QRegExp('^.+$')))
        self.projClientInput.textChanged.connect(self.__checkFormValidators)

        self.projDateLabel = QtWidgets.QLabel('Date')
        self.projDateInput = QtWidgets.QDateEdit()
        self.projDateInput.setDisplayFormat('yyyy-MM-dd')
        self.projDateInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        
        self.projCvssLabel = QtWidgets.QLabel('CVSS version')
        self.projCvssInput = QtWidgets.QSpinBox(minimum=2, maximum=3)
        self.projCvssInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        # Targets
        
        self.targetList = QtPtWidgets.QTableGroupBox(self)
        self.targetList.addColumn(QtWidgets.QTableWidgetItem('Hostname / URL'))
        self.targetList.addColumn(QtWidgets.QTableWidgetItem('IP Address'))
        self.targetList.addColumn(QtWidgets.QTableWidgetItem('Status'))
        self.targetList.editTriggered.connect(self.__triggerEditTarget)

        # Accounts
        
        self.accountList = QtPtWidgets.QTableGroupBox(self)
        self.accountList.addColumn(QtWidgets.QTableWidgetItem('Username'))
        self.accountList.addColumn(QtWidgets.QTableWidgetItem('Password'))
        self.accountList.addColumn(QtWidgets.QTableWidgetItem('Role'))
        self.accountList.editTriggered.connect(self.__triggerEditAccount)

        # Buttons

        self.buttonBox = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

        # QProjectDialog
        
        self.layout.addRow(self.projNameLabel, self.projNameInput)
        self.layout.addRow(self.projClientLabel, self.projClientInput)
        self.layout.addRow(self.projDateLabel, self.projDateInput)
        self.layout.addRow(self.projCvssLabel, self.projCvssInput)
        self.layout.addRow(self.targetList)
        self.layout.addRow(self.accountList)
        self.layout.addRow(self.buttonBox)

    def setWindowTitle(self, dialogTitle: str, appTitle: str = None) -> None:
        """ Set the window title for the current dialog: <dialogTitle> - <appTitle>.

        Args: 
            dialogTitle (str): The dialog title (first part of the window title)
            appTitle (str): The application title (last part of the window title)

        """
        appTitle = f' - {appTitle or ""}' if len(appTitle or '') > 0 else ''
        super(QProjectDialog, self).setWindowTitle(f'{dialogTitle}{appTitle}')

    def setProject(self, project: 'QtPtObjects.QProject') -> None:
        """ Setter for the project object linked to the dialog.

        Args:
            project (QtPtObjects.QProject): The project object to set

        """
        self._project = project

    def project(self) -> 'QtPtObjects.QProject' :
        """ Getter for the project object linked to the dialog.

        Returns:
            QtPtObjects.QProject: The current project object

        """
        return self._project

    def setWorkdir(self, workdir: str) -> None:
        """ Setter for the working directory linked to the dialog.

        Args:
            workdir (str): The working directory to set

        """
        self._workdir = workdir

    def workdir(self) -> str:
        """ Getter for the working directory linked to the dialog.

        Returns:
            QtPtObjects.QProject: The current working directory

        """
        return self._workdir

    def __triggerEditTarget(self, rowItems: ['QtWidgets.QTableWidgetItem']) -> None:
        """ Do stuff when a target's row has been edited:
        - Resolve IP address if it is not provided
        - Set status to 'PROD' by default

        Args:
            rowItems ([QtWidgets.QTableWidgetItem]): The table row that has been edited

        """
        if len(rowItems[0].text()) > 0 and len(rowItems[1].text()) == 0:
            rowItems[1].setText(QtPtObjects.QTarget.resolv(rowItems[0].text()))
        if len(rowItems[0].text()) > 0 and len(rowItems[2].text()) == 0:
            rowItems[2].setText('PROD')

    def __triggerEditAccount(self, rowItems: ['QtWidgets.QTableWidgetItem']) -> None:
        """ Do stuff when a account's row has been edited:
        - Set password to '***' by default
        - Set role to 'user' by default

        Args:
            rowItems ([QtWidgets.QTableWidgetItem]): The table row that has been edited

        """
        if len(rowItems[0].text()) > 0 and len(rowItems[1].text()) == 0:
            rowItems[1].setText('***')
        if len(rowItems[0].text()) > 0 and len(rowItems[2].text()) == 0:
            rowItems[2].setText('user')

    def __checkFormValidators(self) -> None:
        """ Form validator who ensures that the name and client of the 
        project are provided.

        """
        projNameIsAcceptable = self.projNameInput.validator().validate(self.projNameInput.text(), 0)[0] == QtGui.QValidator.Acceptable
        projClientIsAcceptable = self.projClientInput.validator().validate(self.projClientInput.text(), 0)[0] == QtGui.QValidator.Acceptable

        self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(projNameIsAcceptable and projClientIsAcceptable)

    def __formToProject(self) -> None:
        """ Fill the project object linked to the current dialog with the 
        provided values retrieved from the form.

        """
        self._project.set('name', self.projNameInput.text())
        self._project.set('client', self.projClientInput.text())
        self._project.set('date', self.projDateInput.date().toString('yyyy-MM-dd'))

        self._project._targets = list()
        for target in self.targetList.items():
            self._project.addTarget(
                hostname=target[0].text() if isinstance(target[0], QtWidgets.QTableWidgetItem) else None,
                ip=target[1].text() if isinstance(target[1], QtWidgets.QTableWidgetItem) else '127.0.0.1',
                status=target[2].text() if isinstance(target[2], QtWidgets.QTableWidgetItem) else 'PROD'
            )

        self._project._accounts = list()
        for account in self.accountList.items():
            self._project.addAccount(
                username=account[0].text() if isinstance(account[0], QtWidgets.QTableWidgetItem) else None,
                password=account[1].text() if isinstance(account[1], QtWidgets.QTableWidgetItem) else '***',
                role=account[2].text() if isinstance(account[2], QtWidgets.QTableWidgetItem) else 'user'
            )

    @staticmethod
    def getOpenProject(workdir: str, appTitle: str = None, parent: 'QtWidgets.QWidget' = None) -> ('QtPtObjects.QProject', bool):
        """ Open file dialog to select a project to open (i.e. a JSON file). 
        If the selected JSON file match a valid project, successfully return 
        the project object, else return None.

        Args:
            workdir (str): The working directory from which to start searching for JSON files
            appTitle (str): The dialog title (default None)
            parent (QtWidgets.QWidget): The parent widget on which to anchor the dialog

        Returns:
            (QtPtObjects.QProject, bool): The opened project and the state of success or not

        """
        fileName, selectedFilter = QtWidgets.QFileDialog.getOpenFileName(parent, 'Open JSON project file', workdir, 'JSON files (*.json)')

        if len(fileName) == 0:
            return None, False

        file = QtCore.QFileInfo(fileName)
        folder, database = file.absolutePath(), file.fileName()

        if not QtPtObjects.QProject.isProject(folder, database):
            msg = f'The selected file does not exist or is not a valid JSON document \n({fileName})'
            result = QtWidgets.QMessageBox.critical(parent, 'Error', msg, QtWidgets.QMessageBox.Ok)
            return None, False

        return QtPtObjects.QProject(folder, database).read(), True

    @staticmethod
    def getExistingProject(folder: str, appTitle: str = None, parent: 'QtWidgets.QWidget' = None) -> ('QtPtObjects.QProject', bool):
        """ Retrieve an existing project. If the given folder match a valid 
        project, successfully return the project object, else return None.

        Args:
            folder (str): The folder of the requested project
            appTitle (str): The dialog title (default None)
            parent (QtWidgets.QWidget): The parent widget on which to anchor the dialog

        Returns:
            (QtPtObjects.QProject, bool): The opened project and the state of success or not

        """
        if not QtPtObjects.QProject.isProject(folder):
            msg = 'The selected folder does have a valid JSON document \n({folder})'
            result = QtWidgets.QMessageBox.critical(parent, 'Error', msg, QtWidgets.QMessageBox.Ok)
            return None, False

        return QtPtObjects.QProject(folder).read(), True

    @staticmethod
    def getEditProject(project: 'QtPtObjects.QProject', appTitle: str = None, parent: 'QtWidgets.QWidget' = None) -> ('QtPtObjects.QProject', bool):
        """ Open dialog to edit the given project.

        Args:
            project (QtPtObjects.QProject): The project to edit
            appTitle (str): The dialog title (default None)
            parent (QtWidgets.QWidget): The parent widget on which to anchor the dialog

        Returns:
            (QtPtObjects.QProject, bool): The edited project and the state of success or not

        """
        dialog = QProjectDialog(parent)
        dialog.setWindowTitle('Edit project', appTitle)

        dialog.setProject(project)

        dialog.projNameInput.setText(str(dialog._project.get('name', '')))
        dialog.projClientInput.setText(str(dialog._project.get('client', '')))
        dialog.projDateInput.setDate(QtCore.QDate.fromString(dialog._project.get('date', '1970-01-01'), 'yyyy-MM-dd'))
        dialog.projCvssInput.setValue(min(max(int(dialog._project.get('cvss_version', 3)), 2), 3))

        dialog.targetList.clear()
        for target in dialog._project.targets():
            hostname = QtWidgets.QTableWidgetItem(target.get('hostname', ''))
            ip = QtWidgets.QTableWidgetItem(target.get('ip', ''))
            status = QtWidgets.QTableWidgetItem(target.get('status', ''))
            dialog.targetList.addRow(hostname, ip, status)
        dialog.targetList.clearSelection()

        dialog.accountList.clear()
        for account in dialog._project.accounts():
            username = QtWidgets.QTableWidgetItem(account.get('username', ''))
            password = QtWidgets.QTableWidgetItem(account.get('password', ''))
            role = QtWidgets.QTableWidgetItem(account.get('role', ''))
            dialog.accountList.addRow(username, password, role)
        dialog.accountList.clearSelection()

        result = dialog.exec_()

        if result == QtWidgets.QDialog.Accepted:
            dialog.__formToProject()
            dialog._project.write()

        return dialog.project(), bool(result == QtWidgets.QDialog.Accepted)

    @staticmethod
    def getNewProject(workdir: str, appTitle: str = None, parent: 'QtWidgets.QWidget' = None) -> ('QtPtObjects.QProject', bool):
        """ Open dialog to create a new project.

        Args:
            workdir (str): The working directory in which to create the project
            appTitle (str): The dialog title (default None)
            parent (QtWidgets.QWidget): The parent widget on which to anchor the dialog

        Returns:
            (QtPtObjects.QProject, bool): The opened project and the state of success or not

        """
        dialog = QProjectDialog(parent)
        dialog.setWindowTitle('New project', appTitle)
        
        dialog.setProject(QtPtObjects.QProject('.qproj'))
        dialog.setWorkdir(workdir)

        dialog.projNameInput.setText('')
        dialog.projClientInput.setText('')
        dialog.projDateInput.setDate(QtCore.QDate.currentDate())
        dialog.projCvssInput.setValue(3)

        dialog.targetList.clear()
        dialog.accountList.clear()

        dialog.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(False)

        result = dialog.exec_()

        if result == QtWidgets.QDialog.Accepted:
            dialog.__formToProject()
            workdir, nbTry = getattr(dialog, '_workdir', QtCore.QDir.tempPath()), 0
            while not dialog._project.create(workdir, str(nbTry) if nbTry > 0 else ''):
                nbTry += 1

        return dialog.project(), bool(result == QtWidgets.QDialog.Accepted)