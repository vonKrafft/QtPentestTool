# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtObjects
from .. import QtPtWidgets


class QProjectDialog(QtWidgets.QDialog):
    """docstring for QProjectDialog"""

    _project = None
    _workdir = None

    def __init__(self, *args, **kwargs):
        super(QProjectDialog, self).__init__(*args, **kwargs)
        self.setWindowModality(QtCore.Qt.ApplicationModal)

        self.layout = QtWidgets.QFormLayout()
        self.setLayout(self.layout)

        # Project

        self.projNameLabel = QtWidgets.QLabel('Name')
        self.projNameInput = QtWidgets.QLineEdit()
        self.projNameInput.setPlaceholderText('The project\'s name has to be provided.')
        self.projNameInput.setValidator(QtGui.QRegExpValidator(QtCore.QRegExp('^.+$')))
        self.projNameInput.textChanged.connect(self.__checkFormValidators)

        self.projClientLabel = QtWidgets.QLabel('Client')
        self.projClientInput = QtWidgets.QLineEdit()
        self.projClientInput.setPlaceholderText('The project\'s client has to be provided.')
        self.projClientInput.setValidator(QtGui.QRegExpValidator(QtCore.QRegExp('^.+$')))
        self.projClientInput.textChanged.connect(self.__checkFormValidators)

        self.projDateLabel = QtWidgets.QLabel('Date')
        self.projDateInput = QtWidgets.QDateEdit()
        self.projDateInput.setDisplayFormat('yyyy-MM-dd')
        self.projDateInput.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        # Targets
        
        self.targetList = QtPtWidgets.QTableGroupBox(self)
        self.targetList.addColumn(QtWidgets.QTableWidgetItem('Hostname / URL'))
        self.targetList.addColumn(QtWidgets.QTableWidgetItem('IP Address'))
        self.targetList.addColumn(QtWidgets.QTableWidgetItem('Status'))
        self.targetList.editTriggered.connect(self.__editTarget)

        # Accounts
        
        self.accountList = QtPtWidgets.QTableGroupBox(self)
        self.accountList.addColumn(QtWidgets.QTableWidgetItem('Username'))
        self.accountList.addColumn(QtWidgets.QTableWidgetItem('Password'))
        self.accountList.addColumn(QtWidgets.QTableWidgetItem('Role'))
        self.accountList.editTriggered.connect(self.__editAccount)

        # Buttons

        self.buttonBox = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

        # QProjectDialog
        
        self.layout.addRow(self.projNameLabel, self.projNameInput)
        self.layout.addRow(self.projClientLabel, self.projClientInput)
        self.layout.addRow(self.projDateLabel, self.projDateInput)
        self.layout.addRow(self.targetList)
        self.layout.addRow(self.accountList)
        self.layout.addRow(self.buttonBox)

    def setWindowTitle(self, dialogTitle, appTitle = None):
        appTitle = f' - {appTitle or ""}' if len(appTitle or '') > 0 else ''
        super(QProjectDialog, self).setWindowTitle(f'{dialogTitle}{appTitle}')

    def setProject(self, project):
        self._project = project

    def project(self):
        return self._project

    def setWorkdir(self, workdir):
        self._workdir = workdir

    def workdir(self):
        return self._workdir

    def __editTarget(self, rowItems):
        if len(rowItems[0].text()) > 0 and len(rowItems[1].text()) == 0:
            rowItems[1].setText(QtPtObjects.QTarget.resolv(rowItems[0].text()))
        if len(rowItems[0].text()) > 0 and len(rowItems[2].text()) == 0:
            rowItems[2].setText('PROD')

    def __editAccount(self, rowItems):
        if len(rowItems[0].text()) > 0 and len(rowItems[1].text()) == 0:
            rowItems[1].setText('***')
        if len(rowItems[0].text()) > 0 and len(rowItems[2].text()) == 0:
            rowItems[2].setText('user')

    def __checkFormValidators(self):            
        projNameIsAcceptable = self.projNameInput.validator().validate(self.projNameInput.text(), 0)[0] == QtGui.QValidator.Acceptable
        projClientIsAcceptable = self.projClientInput.validator().validate(self.projClientInput.text(), 0)[0] == QtGui.QValidator.Acceptable

        self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(projNameIsAcceptable and projClientIsAcceptable)

    def __formToProject(self):
        self._project.set('name', self.projNameInput.text())
        self._project.set('client', self.projClientInput.text())
        self._project.set('date', self.projDateInput.date().toString('yyyy-MM-dd'))

        self._project.targets = list()
        for target in self.targetList.items():
            self._project.addTarget(
                hostname=target[0].text() if isinstance(target[0], QtWidgets.QTableWidgetItem) else None,
                ip=target[1].text() if isinstance(target[1], QtWidgets.QTableWidgetItem) else '127.0.0.1',
                status=target[2].text() if isinstance(target[2], QtWidgets.QTableWidgetItem) else 'PROD'
            )

        self._project.accounts = list()
        for account in self.accountList.items():
            self._project.addAccount(
                username=account[0].text() if isinstance(account[0], QtWidgets.QTableWidgetItem) else None,
                password=account[1].text() if isinstance(account[1], QtWidgets.QTableWidgetItem) else '***',
                role=account[2].text() if isinstance(account[2], QtWidgets.QTableWidgetItem) else 'user'
            )

    @staticmethod
    def openProject(workdir, appTitle = None, parent = None):
        fileName, selectedFilter = QtWidgets.QFileDialog.getOpenFileName(parent, 'Open JSON project file', workdir, 'JSON files (*.json)')

        if len(fileName) == 0:
            return None, False

        file = QtCore.QFileInfo(fileName)
        folder, database = file.absolutePath(), file.fileName()

        if not QtPtObjects.QProject.isProject(folder, database):
            msg = f'The selected file does not exist or is not a valid JSON document \n({fileName})'
            result = QtWidgets.QMessageBox.critical(parent, 'Error', msg, QtWidgets.QMessageBox.Ok)
            return None, False

        return QtPtObjects.QProject(folder, database).read(), True

    @staticmethod
    def openRecentProject(folder, appTitle = None, parent = None):
        if not QtPtObjects.QProject.isProject(folder):
            msg = 'The selected folder does have a valid JSON document \n({folder})'
            result = QtWidgets.QMessageBox.critical(parent, 'Error', msg, QtWidgets.QMessageBox.Ok)
            return None, False

        return QtPtObjects.QProject(folder).read(), True

    @staticmethod
    def editProject(project, appTitle = None, parent = None):
        dialog = QProjectDialog(parent)
        dialog.setWindowTitle('Edit project', appTitle)

        dialog.setProject(project)

        dialog.projNameInput.setText(str(dialog._project.get('name', '')))
        dialog.projClientInput.setText(str(dialog._project.get('client', '')))
        dialog.projDateInput.setDate(QtCore.QDate.fromString(dialog._project.get('date', '1970-01-01'), 'yyyy-MM-dd'))

        dialog.targetList.clear()
        for target in dialog._project.targets:
            hostname = QtWidgets.QTableWidgetItem(target.get('hostname', ''))
            ip = QtWidgets.QTableWidgetItem(target.get('ip', ''))
            status = QtWidgets.QTableWidgetItem(target.get('status', ''))
            dialog.targetList.addRow(hostname, ip, status)
        dialog.targetList.clearSelection()

        dialog.accountList.clear()
        for account in dialog._project.accounts:
            username = QtWidgets.QTableWidgetItem(account.get('username', ''))
            password = QtWidgets.QTableWidgetItem(account.get('password', ''))
            role = QtWidgets.QTableWidgetItem(account.get('role', ''))
            dialog.accountList.addRow(username, password, role)
        dialog.accountList.clearSelection()

        result = dialog.exec_()

        if result == QtWidgets.QDialog.Accepted:
            dialog.__formToProject()
            dialog._project.write()

        return dialog.project(), bool(result == QtWidgets.QDialog.Accepted)

    @staticmethod
    def newProject(workdir, appTitle = None, parent = None):
        dialog = QProjectDialog(parent)
        dialog.setWindowTitle('New project', appTitle)
        
        dialog.setProject(QtPtObjects.QProject('.qproj'))
        dialog.setWorkdir(workdir)

        dialog.projNameInput.setText('')
        dialog.projClientInput.setText('')
        dialog.projDateInput.setDate(QtCore.QDate.currentDate())

        dialog.targetList.clear()
        dialog.accountList.clear()

        dialog.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(False)

        result = dialog.exec_()

        if result == QtWidgets.QDialog.Accepted:
            dialog.__formToProject()
            workdir, nbTry = getattr(dialog, '_workdir', QtCore.QDir.tempPath()), 1
            while not dialog._project.create(workdir):
                workdir = f'{workdir} ({nbTry})'
                nbTry += 1

        return dialog.project(), bool(result == QtWidgets.QDialog.Accepted)