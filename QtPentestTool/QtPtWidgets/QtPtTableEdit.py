# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtWidgets


class QTableEdit(QtWidgets.QTableWidget):
    """docstring for QTableEdit"""

    currentRowChanged = QtCore.pyqtSignal(int, int)

    def __init__(self, *args, **kwargs):
        super(QTableEdit, self).__init__(*args, **kwargs)

        self.verticalHeader().setVisible(False)
        self.horizontalHeader().setVisible(True)
        self.horizontalHeader().setStretchLastSection(True)
        self.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.setSelectionBehavior(QtWidgets.QTableView.SelectRows)

        self.currentItemChanged.connect(self.__changeCurrentItem)
        self.currentCellChanged.connect(self.__changeCurrentCell)

    def mousePressEvent(self, event):
        self.setCurrentItem(self.itemAt(event.pos()))
        QtWidgets.QTableWidget.mousePressEvent(self, event)

    def focusOutEvent(self, event):
        #self.setCurrentItem(None)
        QtWidgets.QTableWidget.focusOutEvent(self, event)

    def __changeCurrentItem(self, current, previous):
        currentRow = self.row(current) if isinstance(current, QtWidgets.QTableWidgetItem) else -1
        previousRow = self.row(previous) if isinstance(previous, QtWidgets.QTableWidgetItem) else -1
        if currentRow != previousRow:
            self.currentRowChanged.emit(int(currentRow), int(previousRow))

    def __changeCurrentCell(self, currentRow, currentColumn, previousRow, previousColumn):
        if currentRow != previousRow:
            self.currentRowChanged.emit(int(currentRow), int(previousRow))

    def addColumn(self, item):
        column = self.columnCount()
        self.insertColumn(column)
        self.setHorizontalHeaderItem(column, item)

    def addRow(self, *argv):
        row = self.rowCount()
        self.insertRow(row)
        for column, item in enumerate([v for v in argv if isinstance(v, QtWidgets.QTableWidgetItem)]):
            self.setItem(row, column, item)