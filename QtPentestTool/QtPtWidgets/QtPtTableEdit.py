# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets


class QTableEdit(QtWidgets.QTableWidget):
    """Table edit for QtPentestTool.
    Add some methods for QtWidgets.QTableWidget to make rows editable.

    Signals:
        currentRowChanged (QtCore.pyqtSignal)

    """

    """ SIGNAL emitted when the selected row changes """
    currentRowChanged = QtCore.pyqtSignal(int, int)

    def __init__(self, *args, **kwargs) -> None:
        """ Class constructor.

        Args:
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        """
        super(QTableEdit, self).__init__(*args, **kwargs)

        self.verticalHeader().setVisible(False)
        self.horizontalHeader().setVisible(True)
        self.horizontalHeader().setStretchLastSection(True)
        self.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.setSelectionBehavior(QtWidgets.QTableView.SelectRows)

        self.currentItemChanged.connect(self.__changeCurrentItem)
        self.currentCellChanged.connect(self.__changeCurrentCell)

    def mousePressEvent(self, event: 'QtGui.QMouseEvent') -> None:
        """ Handle the mouse click for the current widget.

        Args:
            event (QtGui.QMouseEvent): The handled event

        """
        self.setCurrentItem(self.itemAt(event.pos()))
        QtWidgets.QTableWidget.mousePressEvent(self, event)

    def focusOutEvent(self, event: 'QtGui.QMouseEvent') -> None:
        """ Handle the mouse focus for the current widget.

        Args:
            event (QtGui.QMouseEvent): The handled event

        """
        #self.setCurrentItem(None)
        QtWidgets.QTableWidget.focusOutEvent(self, event)

    def __changeCurrentItem(self, current: 'QtWidgets.QTableWidgetItem', previous: 'QtWidgets.QTableWidgetItem') -> None:
        """ Emit 'currentRowChanged' SIGNAL if the current and the previous rows differ.

        Args:
            current (QtWidgets.QTableWidgetItem): The current selected item
            previous (QtWidgets.QTableWidgetItem): The previous selected item

        """
        currentRow = self.row(current) if isinstance(current, QtWidgets.QTableWidgetItem) else -1
        previousRow = self.row(previous) if isinstance(previous, QtWidgets.QTableWidgetItem) else -1
        if currentRow != previousRow:
            self.currentRowChanged.emit(int(currentRow), int(previousRow))

    def __changeCurrentCell(self, currentRow: int, currentColumn: int, previousRow: int, previousColumn: int) -> None:
        """ Emit 'currentRowChanged' SIGNAL if the current and the previous rows differ.

        Args:
            currentRow (int): The current row index
            currentColumn (int): The current column index
            previousRow (int): The previous row index
            previousColumn (int): The previous column index

        """
        if currentRow != previousRow:
            self.currentRowChanged.emit(int(currentRow), int(previousRow))

    def addColumn(self, heading: 'QtWidgets.QTableWidgetItem') -> None:
        """ Add a new column in the current table

        Args:
            item (QtWidgets.QTableWidgetItem): The heading cell for the column

        """
        column = self.columnCount()
        self.insertColumn(column)
        self.setHorizontalHeaderItem(column, heading)

    def addRow(self, *cells: ['QtWidgets.QTableWidgetItem']) -> None:
        """ Add a new row in the current table

        Args:
            cells ([QtWidgets.QTableWidgetItem]): The cells of the new row

        """
        row = self.rowCount()
        self.insertRow(row)
        for column, item in enumerate([c for c in cells if isinstance(c, QtWidgets.QTableWidgetItem)]):
            self.setItem(row, column, item)