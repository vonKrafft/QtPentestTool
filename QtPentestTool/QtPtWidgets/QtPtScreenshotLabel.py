# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

import os
import subprocess
import textwrap


class QScreenshotLabel(QtWidgets.QLabel):
    """Screenshot label for QtPentestTool.

    Attributes:
        _fileName (str): The filename of the picture linked to the current label

    """

    def __init__(self, fileName: str, *args, **kwargs) -> None:
        """ Class constructor.

        Args:
            fileName (str): The filename of the screenshot
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        """
        super(QScreenshotLabel, self).__init__(*args, **kwargs)
        self.setFileName(fileName)

        picturePixmap = QtGui.QPixmap(self.fileName()).scaled(100, 100, QtCore.Qt.KeepAspectRatioByExpanding, QtCore.Qt.SmoothTransformation)

        self.setObjectName('screenshotLabel')
        self.setPixmap(picturePixmap.copy(0, 0, 100, 100))
        self.setStyleSheet("QLabel#screenshotLabel { border:1px solid #c0c2c3; border-radius: 2px; }")
        self.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.__ctxVulnScreenshotMenu)

    def fileName(self) -> str:
        """ Setter for the screenshot filename linked to the label.

        Returns:
            str: The current filename

        """
        return self._fileName

    def setFileName(self, fileName: str) -> None:
        """ Setter for the screenshot filename linked to the label.

        Args:
            fileName (str): The filename to set

        """
        self._fileName = str(fileName)
    
    def mouseDoubleClickEvent(self, event: 'QtGui.QMouseEvent') -> None:
        """ Handle the double click for the current widget.

        Args:
            event (QtGui.QMouseEvent): The handled event

        """
        self.__openFile()
        super(QScreenshotLabel, self).mouseDoubleClickEvent(event)
    
    def __ctxVulnScreenshotMenu(self, pos: 'QtCore.QPoint') -> None:
        """ Custom context menu created for the current label.

        Args:
            pos (QtCore.QPoint): The cursor position when the context menu is triggered

        """
        cmenu = QtWidgets.QMenu(self.sender())

        openAct = cmenu.addAction(QtGui.QIcon.fromTheme('image-x-generic'), 'Show image')
        openAct.triggered.connect(self.__openFile)

        deleteAct = cmenu.addAction(QtGui.QIcon.fromTheme('edit-delete'), 'Delete image')
        deleteAct.triggered.connect(self.__deleteFile)

        copyAct = cmenu.addAction(QtGui.QIcon.fromTheme('edit-copy'), 'Copy image path')
        copyAct.triggered.connect(self.__copyPath)

        folderAct = cmenu.addAction(QtGui.QIcon.fromTheme('document-open'), 'Open containing folder')
        folderAct.triggered.connect(self.__openFolder)

        cmenu.exec_(self.sender().mapToGlobal(pos))
    
    def __openFile(self) -> None:
        """ Action connected to the context menu to open the screenshot.

        """
        if os.path.isfile(self.fileName()):
            process = QtCore.QProcess(self)
            process.start('xdg-open', [self.fileName()])

    def __deleteFile(self) -> None:
        """ Action connected to the context menu to delete the screenshot.

        """
        msg = 'Any deletion is final. Are you sure you want to remove the screenshot?'
        answer = QtWidgets.QMessageBox.question(self, 'Confirm ?', textwrap.fill(msg, 40), QtWidgets.QMessageBox.Abort | QtWidgets.QMessageBox.Yes)

        if answer != QtWidgets.QMessageBox.Yes:
            return

        if os.path.isfile(self.fileName()):
            os.remove(self.fileName())
        self.setParent(None)

        if isinstance(self.window(), QtWidgets.QMainWindow):
            self.window().statusBar().showMessage('Screenshot deleted', msecs=5000)

    def __copyPath(self) -> None:
        """ Action connected to the context menu to copy the screenshot's path.

        """
        QtWidgets.QApplication.clipboard().setText(self.fileName())

        if isinstance(self.window(), QtWidgets.QMainWindow):
            self.window().statusBar().showMessage('Screenshot path copied to clipboard', msecs=5000)

    def __openFolder(self) -> None:
        """ Action connected to the context menu to open the containing folder.

        """
        if os.path.isdir(os.path.dirname(self.fileName())):
            subprocess.Popen(['xdg-open', os.path.dirname(self.fileName())])