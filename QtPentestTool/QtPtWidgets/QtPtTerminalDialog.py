# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtWidgets


class QTerminalDialog(QtWidgets.QDialog):

    def __init__(self, *args, **kwargs):
        super(QTerminalDialog, self).__init__(*args, **kwargs)

        self.layout = QtWidgets.QFormLayout()
        self.setLayout(self.layout)
        self.setMinimumWidth(500)

        # Terminal

        self.termWidget = QtWidgets.QWidget(self)
        self.termWidget.setStyleSheet('background: black')

        self.process = QtCore.QProcess(self)
        self.process.finished.connect(self.triggerFinished)
        self.terminal = QtWidgets.QWidget(self)

        self.termLayout = QtWidgets.QVBoxLayout(self)
        self.termLayout.addWidget(self.terminal)

        self.termWidget.setFixedSize(640, 480)

        # Buttons

        self.buttonBox = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Close)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

        # QProjectDialog
         
        self.layout.addRow(self.termWidget)
        self.layout.addRow(self.buttonBox)

    def setWindowTitle(self, dialogTitle, appTitle = None):
        appTitle = ' - {}'.format(appTitle or '') if len(appTitle or '') > 0 else ''
        super(QTerminalDialog, self).setWindowTitle('{}{}'.format(dialogTitle, appTitle))

    def run(self, command, appTitle = None):
        self.setWindowTitle('Scan', appTitle)

        print(('QTerminalDialog.run()', command))
        self.process.start('urxvt', [
            '-bg', 'black',                                 # Background color
            '-fg', 'white',                                 # Foreground color
            '-embed', str(int(self.termWidget.winId())),    # Embed terminal in current widget
            '+sb',                                          # Disable scrollbar
            '-e', '/bin/sh',                                # Exec /bin/sh
            '-c', '{}; echo "\nDone."; read line'.format(command)
        ])

        return self.show()

    def triggerFinished(self, exitCode):
        self.accept()