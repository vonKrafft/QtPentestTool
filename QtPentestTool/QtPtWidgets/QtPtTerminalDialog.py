# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtWidgets


class QTerminalDialog(QtWidgets.QDialog):
    """Terminal dialog for QtPentestTool.
    [WARNING] Require urxvt to be installed on the host system.

    Attributes:
        layout (QtWidgets.QVBoxLayout): Current dialog's layout

        termWidget (QtWidgets.QWidget)
        process (QtCore.QProcess)
        terminal (QtWidgets.QWidget)
        termLayout (QtWidgets.QVBoxLayout)
        buttonBox (QtWidgets.QDialogButtonBox)

    """

    def __init__(self, *args, **kwargs) -> None:
        """ Class constructor.

        Args:
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        """
        super(QTerminalDialog, self).__init__(*args, **kwargs)

        self.layout = QtWidgets.QFormLayout()
        self.setLayout(self.layout)
        self.setMinimumWidth(500)

        # Terminal

        self.termWidget = QtWidgets.QWidget(self)
        self.termWidget.setStyleSheet('background: black')

        self.process = QtCore.QProcess(self)
        self.process.finished.connect(self.__triggerFinished)
        self.terminal = QtWidgets.QWidget(self)

        self.termLayout = QtWidgets.QVBoxLayout(self)
        self.termLayout.addWidget(self.terminal)

        self.termWidget.setFixedSize(640, 480)

        # Buttons

        self.buttonBox = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Close)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

        # QProjectDialog
         
        self.layout.addRow(self.termWidget)
        self.layout.addRow(self.buttonBox)

    def setWindowTitle(self, dialogTitle: str, appTitle: str = None) -> None:
        """ Set the window title for the current dialog: <dialogTitle> - <appTitle>.

        Args: 
            dialogTitle (str): The dialog title (first part of the window title)
            appTitle (str): The application title (last part of the window title)

        """
        appTitle = f' - {appTitle or ""}' if len(appTitle or '') > 0 else ''
        super(QTerminalDialog, self).setWindowTitle(f'{dialogTitle}{appTitle}')

    def run(self, command: str, appTitle: str = None) -> int:
        """ Run the given command in a terminal.

        Args: 
            command (str): The command to execute
            appTitle (str, optional): The application title (default None)

        Returns:
            int: A DialogCode result

        """
        self.setWindowTitle('Scan', appTitle)

        self.process.start('urxvt', [
            '-bg', 'black',                                 # Background color
            '-fg', 'white',                                 # Foreground color
            '-embed', str(int(self.termWidget.winId())),    # Embed terminal in current widget
            '+sb',                                          # Disable scrollbar
            '-e', '/bin/sh',                                # Exec /bin/sh
            '-c', f'{command}; echo "\nDone."; read line'   # Run command
        ])

        return self.show()

    def __triggerFinished(self, exitCode: int) -> None:
        """ Handle SIGNAL when the QProcess ends, and close the current dialog

        Args:
            exitCode (int): The exit code returned by the process

        """
        self.accept()