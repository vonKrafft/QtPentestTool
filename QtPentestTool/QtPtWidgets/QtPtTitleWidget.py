# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets

from .. import QtPtObjects
from .. import QtPtWidgets


class QTitleWidget(QtWidgets.QWidget):
    """docstring for QTitleWidget"""

    def __init__(self, *args, **kwargs):
        super(QTitleWidget, self).__init__(*args, **kwargs)

        self.layout = QtWidgets.QVBoxLayout()
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.setLayout(self.layout)

        # Title
        
        self.titleLabel = QtWidgets.QLabel(self)
        self.titleLabel.setFont(QtGui.QFont('SansSerif', 24))
        self.titleLabel.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignBottom)
        self.titleLabel.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)

        # Breadcrumb

        self.breadcrumbLabel = QtWidgets.QLabel(self)
        self.breadcrumbLabel.setFont(QtGui.QFont('SansSerif', 8, italic=True))
        self.breadcrumbLabel.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.breadcrumbLabel.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)

        # Score

        self.scoreWidget = QtPtWidgets.QScoreWidget()

        # QTitleWidget

        self.layout.addWidget(self.titleLabel)
        self.layout.addWidget(self.breadcrumbLabel)
        self.layout.addWidget(self.scoreWidget)

    def setVisible(self, visible = True):
        super(QTitleWidget, self).setVisible(visible)

    def setProject(self, project):        
        project.loadVulnerabilities()

        self.titleLabel.setText('{client} - {name}'.format(
            client=project.get('client', 'MISC'),
            name=project.get('name', 'Untitled project')
        ))

        self.breadcrumbLabel.setText(project.dirname())

        self.setScore(project.vulns)

    def setScore(self, vulnerabilities):
        counter = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0, 'none': 0, 'n/a': 0}
        for vuln in vulnerabilities:
            counter[vuln.cvss.rating().lower()] = counter.get(vuln.cvss.rating().lower(), 0) + 1
        self.scoreWidget.setNbVuln(len(vulnerabilities), **counter)
