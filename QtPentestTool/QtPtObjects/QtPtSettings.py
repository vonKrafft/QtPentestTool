# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
import json
import os
import shutil


class QSettings(object):
    """ Model object for a setting """

    CONFIG_FILE = os.path.join(os.path.expanduser('~'), '.config', 'PentestTool', 'config.json')

    def __init__(self, *argv, **kwargs):
        """ Class constructor

        Keyword arguments:
        username -- the account's username
        password -- the account's password (default None)
        role -- the application's role for this account (default 'user')
        """
        super(QSettings, self).__init__()
        self.set('workdir', kwargs.get('workdir', os.path.expanduser('~')))
        self.set('delay', kwargs.get('delay', 5))
        self.set('cvss_version', kwargs.get('cvss_version', 3))
        self.set('archive', kwargs.get('archive', 'tar'))

    def __str__(self):
        """ String representation for the class

        Return
        the current class as a string
        """
        return self.dict().__str__()

    def __repr__(self):
        """ Printable representation for the class

        Return
        the current class as a printable representation
        """
        return self.dict().__repr__()

    def load(self):
        """ Retrieve application's settings from the configuration's file
        The file has to exist and be JSON

        Return:
        the current class
        """
        try:
            with open(self.CONFIG_FILE, 'r') as file:
                self.__init__(**json.load(file))
        except:
            self.__init__()
        return self

    def dump(self):
        """ Save application's settings into the configuration's file
        The data will be stored in JSON and the file will be overwritten

        Return:
        the current class
        """
        os.makedirs(os.path.dirname(self.CONFIG_FILE), exist_ok=True)
        with open(self.CONFIG_FILE, 'w') as file:
            json.dump(self.dict(), file, indent=4)
        return self

    def dict(self):
        """ Dictionary’s representation of the class

        Return:
        the current class as a dictionary
        """
        return {
            'workdir': getattr(self, 'workdir', os.path.expanduser('~')),
            'delay': getattr(self, 'delay', 5),
            'cvss_version': getattr(self, 'cvss_version', 3),
            'archive': getattr(self, 'archive', 'tar')
        }

    def items(self):
        """ Return a new view of the dictionary’s items ((key, value) pairs)

        Return:
        items from the dictionary’s representation of the class
        """
        return self.dict().items()

    def values(self):
        """ Return a new view of the dictionary’s values

        Return:
        values from the dictionary’s representation of the class
        """
        return self.dict().values()

    def keys(self):
        """ Return a new view of the dictionary’s keys.

        Return:
        keys from the dictionary’s representation of the class
        """
        return self.dict().keys()

    def get(self, key, default = None):
        """ Getter for a setting property

        Keyword arguments:
        key -- the name of the property
        default -- the value to return if the property does not exist

        Return:
        the value of the requested property
        """
        return self.dict().get(key, default)

    def set(self, key, value):
        """ Setter for a setting property

        Keyword arguments:
        key -- the name of the property
        value -- the value of the property
        """
        if key == 'workdir':
            setattr(self, key, os.path.abspath(value))
        elif key == 'delay':
            setattr(self, key, min(max(int(value), 0), 60))
        elif key == 'cvss_version':
            setattr(self, key, min(max(int(value), 2), 3))
        elif key == 'archive':
            setattr(self, key, value if value in [f[0] for f in shutil.get_archive_formats()] else 'tar')

    @staticmethod
    def input(key):
        return {
            'workdir': str(),
            'delay': (0, 60, ' seconds'),
            'cvss_version': (2, 3),
            'archive': [f[0] for f in shutil.get_archive_formats()]
        }.get(key, None)

    @staticmethod
    def label(key):
        return {
            'workdir': 'Working directory',
            'delay': 'Screenshot delay',
            'cvss_version': 'CVSS version',
            'archive': 'Archive format'
        }.get(key, str(key))