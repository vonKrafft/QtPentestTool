# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import re


class QAccount(object):
    """ Model object for an account """

    def __init__(self, username, password = None, role = 'user'):
        """ Class constructor

        Keyword arguments:
        username -- the account's username
        password -- the account's password (default None)
        role -- the application's role for this account (default 'user')
        """
        self.username = username
        self.password = password
        self.role = role
        
    @staticmethod
    def fromString(text):
        """ Try to create a new QAccount object from a string
        <username>:<password> (<role>)

        Keyword arguments:
        text -- the string to parse

        Return:
        a QAccount object
        """
        matches = re.search(r'^(?P<username>[^:]+):(?P<password>[^\s]+)(?: *\((?P<role>[^\)]+)\))?$', text)
        account = matches.groupdict() if matches is not None else {}
        return QAccount(account.get('username', None), account.get('password', None), account.get('role', None))

    @staticmethod
    def build(*argv, **kwargs):
        """ Try to build a QAccount with the given arguments
        Provide either a "text" or the three properties "username", "password" and "role"

        Keyword arguments:
        text -- the string to parse
        username -- the account's username
        password -- the account's password
        role -- the application's role for this account
        """
        if kwargs.get('text') is not None:
            return QAccount.fromString(kwargs.get('text', ''))
        else:
            return QAccount(kwargs.get('username'), kwargs.get('password'), kwargs.get('role'))

    def dict(self):
        """ Array representation for the class

        Return:
        the current class as an array
        """
        return { 'username': self.username, 'password': self.password, 'role': self.role }

    def __str__(self):
        """ String representation for the class

        Return
        the current class as a string
        """
        return '{username}:{password} ({role})'.format(**self.dict())

    def get(self, key, default = None):
        """ Getter for a setting property

        Keyword arguments:
        key -- the name of the property
        default -- the value to return if the property does not exist (default None)

        Return:
        the value of the requested property
        """
        return getattr(self, key, default)

    def set(self, key, value):
        """ Setter for a setting property

        Keyword arguments:
        key -- the name of the property
        value -- the value of the property
        """
        setattr(self, key, value)

    def isEmpty(self):
        """ Check if the current object is empty

        Return
        True if the object is empty, False otherwise
        """
        return bool(len('{}{}{}'.format(self.username or '', self.password or '', self.role or '')) == 0)