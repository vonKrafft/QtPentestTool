# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore


class QAccount(object):
    """ Model object for an account.

    Attributes:
        username (str): The account's username
        password (str): The account's password
        role (str): The application's role for this account 

    """

    def __init__(self, username: str = None, password: str = None, role: str = 'user', *argv, **kwargs) -> None:
        """ Class constructor.
        If "fromString" argument is provided, try to create a new QAccount
        object from a string = <username>:<password> (<role>).

        Args:
            username (str, optional): The account's username (default None)
            password (str, optional): The account's password (default None)
            role (str, optional): The application's role for this account (default 'user')
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        Kwargs:
            fromString (str, optional): The string to parse, overwrite other arguments if provided

        """
        if kwargs.get('fromString') is not None:
            text = kwargs.get('fromString')
            regex = QtCore.QRegExp(r'^([^:]+):([^\s]+)\s*(?:\(([^\)]+)\))?$')
            match = regex.capturedTexts() if regex.indexIn(text) >= 0 else [text, '', '', '']
            self.username = match[1]
            self.password = match[2]
            self.role = match[3]
        else:
            self.username = username
            self.password = password
            self.role = role

    def dict(self) -> {str: object}:
        """ Array representation for the class.

        Returns:
            {str: object}: The current class as an array

        """
        return { 'username': self.username, 'password': self.password, 'role': self.role }

    def __str__(self) -> str:
        """ String representation for the class.

        Returns:
            str: The current class as a string

        """
        return '{username}:{password} ({role})'.format(**self.dict())

    def get(self, key: str, default: object = None) -> object:
        """ Getter for a setting property.

        Args:
            key (str): The name of the property
            default (object, optional): The value to return if the property does not exist (default None)

        Returns:
            object: The value of the requested property

        """
        return getattr(self, key, default)

    def set(self, key: str, value: object) -> None:
        """ Setter for a setting property.

        Args:
            key (str): The name of the property
            value (object): The value of the property

        """
        setattr(self, key, value)

    def isEmpty(self) -> bool:
        """ Check if the current object is empty.

        Returns:
            bool: True if the object is empty, False otherwise

        """
        return bool(len(f'{self.username or ""}{self.password or ""}{self.role or ""}') == 0)