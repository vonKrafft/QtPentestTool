# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from .. import QtPtCore


class QMetricItem(object):
    """ Model object for a metric item.

    Attributes:
        sid (QtPtCore.QCvssMetricValue): The string identifier for the metric item
        name (str): The metric item name
        label (str): The label of the metric item
        score (float): The score of the metric item
        help (str): The help text of the metric item

    """

    def __init__(self, sid: 'QtPtCore.QCvssMetricValue', name: str = None, *argv, **kwargs) -> None:
        """ Class constructor.
        If "fromString" argument is provided, try to create a new QAccount
        object from a string = <username>:<password> (<role>).

        Args:
            sid (QtPtCore.QCvssMetricValue): The string identifier for the metric item
            name (str, optional): The metric item name (default None)
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        Kwargs:
            label (str, optional): The label of the metric item (default '')
            score (float, optional): The score of the metric item (default 0.0)
            help (str, optional): The help text of the metric item (default '')

        """
        super(QMetricItem, self).__init__()

        self.sid = QtPtCore.QCvssMetricValue(sid)
        self.name = str(name or '')

        self.label = kwargs.get('label', '')
        self.score = kwargs.get('score', 0.0)
        self.help = kwargs.get('help', '')
    
    def __repr__(self) -> {str: object}:
        """ Array representation for the class.

        Returns:
            {str: object}: The current class as an array

        """
        return { 'label': self.label, 'score': self.score, 'help': self.help }

    def get(self, key: str, default: object = None) -> object:
        """ Getter for a metric item.

        Args:
            key (str): The name of the property
            default (object): The default value if the property does not exist (default None)

        Returns:
           object: The requested property

        """
        return getattr(self, key, default)

    def set(self, key: str, item: object) -> None:
        """ Setter for a metric item.

        Args:
            key (str): The name of the property
            item (object, optional): The value of the property

        """
        setattr(self, key, item)

    def title(self, metricSid: 'QtPtCore.QCvssMetric') -> str:
        """ Get a formated title for the current metric item.

        Args:
            metricSid (QtPtCore.QCvssMetric): the string identifier of a metric

        Returns:
            str: The title of the metric item

        """
        return f'{self.name} ({metricSid}:{self.sid})'