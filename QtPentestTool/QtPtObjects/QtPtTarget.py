# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from PyQt5 import QtCore
from PyQt5 import QtNetwork

import re # PyQt5.QtCore.QRegExp has no replace method, thus "re" is needed


class QTarget(object):
    """ Model object for an target.

    Attributes:
        hostname (str): The target's hostname
        ip (str): The target's IP address
        status (str): The application's status for this target

    """

    def __init__(self, hostname: str = None, ip: str = None, status: str = 'PROD', *argv, **kwargs) -> None:
        """ Class constructor.
        If "fromString" argument is provided, try to create a new QAccount
        object from a string = <hostname> (<ip>) <status>.

        Args:
            hostname (str, optional): The target's hostname (default None)
            ip (str, optional): The target's IP address (default None)
            status (str, optional): The application's status for this target (default 'PROD')
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        Kwargs:
            fromString (str, optional): The string to parse, overwrite other arguments if provided

        """
        if kwargs.get('fromString') is not None:
            text = kwargs.get('fromString')
            regex = QtCore.QRegExp(r'^([^\s]*)\s*(?:\(([0-9.]+)\))?\s*(?:([\w.-]+))?$')
            match = regex.capturedTexts() if regex.indexIn(text) >= 0 else [text, '', '', '']
            self.hostname = match[1]
            self.ip = match[2] if len(match[2] or '') > 0 else QTarget.resolv(self.hostname)
            self.status = re.sub(r'[^\w.-]+', '', (match[3] or '')).upper()
        else:
            self.hostname = hostname
            self.ip = ip if len(ip or '') > 0 else QTarget.resolv(self.hostname)
            self.status = re.sub(r'[^\w.-]+', '', (status or '')).upper()
        
    @staticmethod
    def resolv(hostname: str) -> str:
        """ Retrieve IP address from the given hostname.

        Args:
            hostname (str): The target's hostname

        Returns:
            str: The IP address requested

        """
        hostname = re.sub(r'(?:https?://)?([^/\s]+\.[a-z]{2,}).*', r'\1', hostname)
        host = QtNetwork.QHostInfo.fromName(hostname)
        return host.addresses()[0].toString() if host.addresses() else '127.0.0.1'

    def dict(self) -> {str: object}:
        """ Array representation for the class.

        Returns:
            {str: object}: The current class as an array

        """
        return { 'hostname': self.hostname, 'ip': self.ip, 'status': self.status }

    def __str__(self) -> str:
        """ String representation for the class.

        Returns:
            the current class as a string

        """
        return '{hostname} ({ip}) {status}'.format(**self.dict())

    def get(self, key: str, default: object = None) -> object:
        """ Getter for a setting property.

        Args:
            key (str): The name of the property
            default (object, optional): The value to return if the property does not exist (default None)

        Returns:
            object: The value of the requested property

        """
        return getattr(self, key, default)

    def set(self, key: str, value: object) -> None:
        """ Setter for a setting property.

        Args:
            key (str): The name of the property
            value (object): The value of the property

        """
        setattr(self, key, value)

    def isEmpty(self) -> bool:
        """ Check if the current object is empty.

        Returns:
            bool: True if the object is empty, False otherwise

        """
        return bool(len(f'{self.hostname or ""}{self.ip or ""}{self.status or ""}') == 0)

    def isLink(self) -> bool:
        """ Check if the target's hostname is a valid URL.

        Returns:
            bool: True if the hostname is a valid URL, False otherwise

        """
        return bool(re.match(r'^https?://', self.hostname or '') is not None)

    def getScheme(self) -> str:
        """ Get the target's HTTP scheme if present, http:// by default.

        Returns:
            str: The HTTP scheme (Secure or not)

        """
        return 'https://' if self.hostname.startswith('https://') else 'http://'