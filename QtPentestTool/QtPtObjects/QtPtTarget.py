# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import re
import socket


class QTarget(object):
    """ Model object for an target """

    def __init__(self, hostname, ip = None, status = 'PROD'):
        """ Class constructor

        Keyword arguments:
        hostname -- the target's hostname
        ip -- the target's IP address (default None)
        status -- the application's status for this target (default 'PROD')
        """
        self.hostname = hostname
        self.ip = ip if len(ip or '') > 0 else QTarget.resolv(self.hostname)
        self.status = str(status or '').upper()
        
    @staticmethod
    def resolv(hostname):
        """ Retrieve IP address from the current hostname

        Return
        the IP address requested
        """
        try:
            hostname = re.sub(r'(?:https?://)?([^/\s]+\.[a-z]{2,}).*', r'\1', hostname)
            return socket.getaddrinfo(hostname, 0, 0, 0, 0)[0][-1][0]
        except:
            return None if len(hostname or '') == 0 else '127.0.0.1'
        
    @staticmethod
    def fromString(text):
        """ Try to create a new QTarget object from a string
        <hostname> (<ip>) <status>

        Keyword arguments:
        text -- the string to parse

        Return:
        a QTarget object
        """
        matches = re.search(r'^(?P<hostname>(?:https?://)?[^/\s]+\.[a-z]{2,}[^\s]*)(?: *\((?P<ip>[0-9.]+)\))?(?: *(?P<status>\w+))?$', text)
        target = matches.groupdict() if matches is not None else {}
        return QTarget(target.get('hostname', None), target.get('ip', None), target.get('status', None))

    @staticmethod
    def build(*argv, **kwargs):
        """ Try to build a QTarget with the given arguments
        Provide either a "text" or the three properties "hostname", "ip" and "status"

        Keyword arguments:
        text -- the string to parse
        hostname -- the target's hostname
        ip -- the target's IP address
        status -- the application's status for this target
        """
        if kwargs.get('text') is not None:
            return QTarget.fromString(kwargs.get('text', ''))
        else:
            return QTarget(kwargs.get('hostname'), kwargs.get('ip'), kwargs.get('status'))

    def dict(self):
        """ Array representation for the class

        Return:
        the current class as an array
        """
        return { 'hostname': self.hostname, 'ip': self.ip, 'status': self.status }

    def __str__(self):
        """ String representation for the class

        Return
        the current class as a string
        """
        return '{hostname} ({ip}) {status}'.format(**self.dict())

    def get(self, key, default = None):
        """ Getter for a setting property

        Keyword arguments:
        key -- the name of the property
        default -- the value to return if the property does not exist (default None)

        Return:
        the value of the requested property
        """
        return getattr(self, key, default)

    def set(self, key, value):
        """ Setter for a setting property

        Keyword arguments:
        key -- the name of the property
        value -- the value of the property
        """
        setattr(self, key, value)

    def isEmpty(self):
        """ Check if the current object is empty

        Return
        True if the object is empty, False otherwise
        """
        return bool(len(f'{self.hostname or ""}{self.ip or ""}{self.status or ""}') == 0)

    def isLink(self):
        """ Check if the target's hostname is a valid URL

        Return
        True if the hostname is a valid URL, False otherwise
        """
        return bool(re.match(r'^https?://', self.hostname or '') is not None)

    def getScheme(self):
        """ Get the target's HTTP scheme if present, http:// by default

        Return
        the HTTP scheme (Secure or not)
        """
        return 'https://' if self.hostname.startswith('https://') else 'http://'