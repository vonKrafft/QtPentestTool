# Copyright (c) 2019 vonKrafft <contact@vonkrafft.fr>
# 
# This file is part of QtPentestTool.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

from .. import QtPtCore
from .. import QtPtObjects


class QMetric(object):
    """ Model object for a CVSS metric.

    Attributes:
        data ({int: QtPtObjects.QMetricItem}): The CVSS metric items
        sid (QtPtCore.QCvssMetric): The string identifier for the CVSS metric
        name (str): The CVSS metric name
        version (int): The CVSS version to use, either 2 or 3

    """

    def __init__(self, sid: 'QtPtCore.QCvssMetric' = None, name: str = None, version: int = 3, *argv, **kwargs) -> None:
        """ Class constructor.

        Args:
            sid (QtPtCore.QCvssMetric, optional): The string identifier for the CVSS metric (default None)
            name (str, optional): The CVSS metric name (default None)
            version (int, optional): The CVSS version to use, either 2 or 3 (default 3)
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        """
        super(QMetric, self).__init__()

        self.data = dict()
        self.sid = QtPtCore.QCvssMetric(sid)
        self.name = str(name or '')
        self.version = max(2, min(3, int(version)))

        if callable(getattr(self, f'default{self.sid}', None)):
            getattr(self, f'default{self.sid}')()

        self.setSelected(kwargs.get('selected', None))
        
    def __str__(self) -> str:
        """ String representation for the class.

        Returns:
            str: The current class as a string

        """
        return str(self.getSelected() or '')

    def items(self) -> list:
        """ Get the CVSS metric items as (key, values)

        Returns:
            list: The CVSS metric items

        """
        return self.data.items()

    def get(self, sid: 'QtPtCore.QCvssMetric', default: object = None) -> 'QtPtObjects.QMetricItem':
        """ Getter for a CVSS metric.

        Args:
            sid (QtPtCore.QCvssMetric): The name of the metric, or a QMetric object
            default (object): The default value if metric does not exist (default None)

        Returns:
           QtPtObjects.QMetricItem: The requested metric

        """
        return {mv.sid: mv for mv in self.data.values()}.get(sid, default)

    def set(self, sid: 'QtPtCore.QCvssMetric', item: 'QtPtObjects.QMetricItem' = None, *argv, **kwargs) -> None:
        """ Setter for a CVSS metric.

        Args:
            sid (object): The name of the metric, or a QMetric object
            item (str, optional): The value of the metric
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        """
        item = QtPtObjects.QMetricItem(sid, *argv, **kwargs) if item is None else item

        for index, metricItem in self.data.items():
            if metricItem.sid == sid:
                self.data[index] = item

    def setSelected(self, value: 'QtPtCore.QCvssMetricValue') -> None:
        """ Mark a metric item as selected.

        Args:
            value (QtPtCore.QCvssMetricValue): The wanted metric

        """
        setattr(self, 'selected', QtPtCore.QCvssMetricValue(value))

    def unsetSelected(self) -> None:
        """ Mark all metric items as unselected

        """
        setattr(self, 'selected', None)

    def getSelected(self) -> 'QtPtCore.QCvssMetricValue':
        """ Get the current selected metric item.

        Returns:
            QtPtCore.QCvssMetricValue: The current selected metric item

        """
        return QtPtCore.QCvssMetricValue(getattr(self, 'selected', None))

    def isSelected(self, value):
        """ Check if the selected metric item match the given value.

        Args:
            value (QtPtCore.QCvssMetricValue): The wanted metric

        Returns:
            bool: True if the given value match the selected metric item, False otherwise

        """
        return self.getSelected() == QtPtCore.QCvssMetricValue(value)

    def label(self, default: str = '') -> str:
        """ Get the label of the selected metric item.

        Args:
            default (str, optional): The default value if there is no selected metric item

        Returns:
            str: The label of the selected metric item

        """
        return self.get(self.getSelected(), dict()).get('label', default)

    def score(self, default: float = 0.0) -> float:
        """ Get the score of the selected metric item.

        Args:
            default (float, optional): The default value if there is no selected metric item

        Returns:
            float: The score of the selected metric item

        """
        return self.get(self.getSelected(), dict()).get('score', default)

    def help(self, default: str = '') -> str:
        """ Get the help text of the selected metric item.

        Args:
            default (str, optional): The default value if there is no selected metric item

        Returns:
            str: The help text of the selected metric item

        """
        return self.get(self.getSelected(), dict()).get('help', default)

    def title(self) -> str:
        """ Get a formated title for the current metric.

        Returns:
            str: The metric's title

        """
        return f'{self.name} ({self.sid})'

    def defaultAV(self) -> None:
        """ Initialize default metric items for the 'Attack Vector' metric.

        """
        if self.version == 3:
            self.data[0] = QtPtObjects.QMetricItem(QtPtCore.QtPt.NetworkMetricValue, 'Network', label='Network', score=0.85, help='A vulnerability exploitable with Network access means the vulnerable component is bound to the network stack and the attacker\'s path is through OSI layer 3 (the network layer). Such a vulnerability is often termed \'remotely exploitable\' and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).')
            self.data[1] = QtPtObjects.QMetricItem(QtPtCore.QtPt.AdjacentNetworkMetricValue, 'Adjacent Network', label='Adjacent Network', score=0.62, help='A vulnerability exploitable with Adjacent Network access means the vulnerable component is bound to the network stack, however the attack is limited to the same shared physical (e.g. Bluetooth, IEEE 802.11), or logical (e.g. local IP subnet) network, and cannot be performed across an OSI layer 3 boundary (e.g. a router).')
            self.data[2] = QtPtObjects.QMetricItem(QtPtCore.QtPt.LocalMetricValue, 'Local', label='Local', score=0.55, help='A vulnerability exploitable with Local access means that the vulnerable component is not bound to the network stack, and the attacker\'s path is via read/write/execute capabilities. In some cases, the attacker may be logged in locally in order to exploit the vulnerability, or may rely on User Interaction to execute a malicious file.')
            self.data[3] = QtPtObjects.QMetricItem(QtPtCore.QtPt.PhysicalMetricValue, 'Physical', label='Physical', score=0.2, help='A vulnerability exploitable with Physical access requires the attacker to physically touch or manipulate the vulnerable component, such as attaching an peripheral device to a system.')
        elif self.version == 2:
            self.data[0] = QtPtObjects.QMetricItem(QtPtCore.QtPt.NetworkMetricValue, 'Network', label='Network', score=1.0, help='A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access. Such a vulnerability is often termed “remotely exploitable”. An example of a network attack is an RPC buffer overflow.')
            self.data[1] = QtPtObjects.QMetricItem(QtPtCore.QtPt.AdjacentNetworkMetricValue, 'Adjacent Network', label='Adjacent Network', score=0.646, help='A vulnerability exploitable with adjacent network access requires the attacker to have access to either the broadcast or collision domain of the vulnerable software. Examples of local networks include local IP subnet, Bluetooth, IEEE 802.11, and local Ethernet segment.')
            self.data[2] = QtPtObjects.QMetricItem(QtPtCore.QtPt.LocalMetricValue, 'Local', label='Local', score=0.395, help='A vulnerability exploitable with only local access requires the attacker to have either physical access to the vulnerable system or a local (shell) account. Examples of locally exploitable vulnerabilities are peripheral attacks such as Firewire/USB DMA attacks, and local privilege escalations (e.g., sudo).')

    def defaultAC(self) -> None:
        """ Initialize default metric items for the 'Attack Complexity' metric.

        """
        if self.version == 3:
            self.data[0] = QtPtObjects.QMetricItem(QtPtCore.QtPt.LowMetricValue, 'Low', label='Low', score=0.77, help='Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.')
            self.data[1] = QtPtObjects.QMetricItem(QtPtCore.QtPt.HighMetricValue, 'High', label='High', score=0.44, help='A successful attack depends on conditions beyond the attacker\'s control. That is, a successful attack cannot be accomplished at will, but requires the attacker to invest in some measurable amount of effort in preparation or execution against the vulnerable component before a successful attack can be expected.')
        elif self.version == 2:
            self.data[0] = QtPtObjects.QMetricItem(QtPtCore.QtPt.LowMetricValue, 'Low', label='Low', score=0.71, help='Specialized access conditions or extenuating circumstances do not exist. The following are examples: The affected product typically requires access to a wide range of systems and users, possibly anonymous and untrusted (e.g., Internet-facing web or mail server).  The affected configuration is default or ubiquitous.   The attack can be performed manually and requires little skill or additional information gathering.   The \'race condition\' is a lazy one (i.e., it is technically a race but easily winnable).')
            self.data[1] = QtPtObjects.QMetricItem(QtPtCore.QtPt.MediumMetricValue, 'Medium', label='Medium', score=0.61, help='The access conditions are somewhat specialized; the following are examples: The attacking party is limited to a group of systems or users at some level of authorization, possibly untrusted.  Some information must be gathered before a successful attack can be launched.  The affected configuration is non-default, and is not commonly configured (e.g., a vulnerability present when a server performs user account authentication via a specific scheme, but not present for another authentication scheme). The attack requires a small amount of social engineering that might occasionally fool cautious users (e.g., phishing attacks that modify a web browser’s status bar to show a false link, having to be on someone’s “buddy” list before sending an IM exploit).')
            self.data[2] = QtPtObjects.QMetricItem(QtPtCore.QtPt.HighMetricValue, 'High', label='High', score=0.35, help='Specialized access conditions exist. For example,  in most configurations, the attacking party must already have elevated privileges or spoof additional systems in addition to the attacking system (e.g., DNS hijacking). The attack depends on social engineering methods that would be easily detected by knowledgeable people. For example, the victim must perform several suspicious or atypical actions.  The vulnerable configuration is seen very rarely in practice.  If a race condition exists, the window is very narrow.')

    def defaultAu(self) -> None:
        """ Initialize default metric items for the 'Authentication' metric.

        """
        if self.version == 2:
            self.data[0] = QtPtObjects.QMetricItem(QtPtCore.QtPt.MultipleMetricValue, 'Multiple', label='Multiple', score=0.45, help='Exploiting the vulnerability requires that the attacker authenticate two or more times, even if the same credentials are used each time. An example is an attacker authenticating to an operating system in addition to providing credentials to access an application hosted on that system.')
            self.data[1] = QtPtObjects.QMetricItem(QtPtCore.QtPt.SingleMetricValue, 'Single', label='Single', score=0.56, help='One instance of authentication is required to access and exploit the vulnerability.')
            self.data[2] = QtPtObjects.QMetricItem(QtPtCore.QtPt.NoneMetricValue, 'None', label='None', score=0.704, help='Authentication is not required to access and exploit the vulnerability.')

    def defaultPR(self) -> None:
        """ Initialize default metric items for the 'Privileges Required' metric.

        """
        if self.version == 3:
            self.data[0] = QtPtObjects.QMetricItem(QtPtCore.QtPt.NoneMetricValue, 'None', label='None', score=(0.85, 0.85), help='The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.')
            self.data[1] = QtPtObjects.QMetricItem(QtPtCore.QtPt.LowMetricValue, 'Low', label='Low', score=(0.62, 0.68), help='The attacker is authorized with (i.e. requires) privileges that provide basic user capabilities that could normally affect only settings and files owned by a user. Alternatively, an attacker with Low privileges may have the ability to cause an impact only to non-sensitive resources.')
            self.data[2] = QtPtObjects.QMetricItem(QtPtCore.QtPt.HighMetricValue, 'High', label='High', score=(0.27, 0.5), help='The attacker is authorized with (i.e. requires) privileges that provide significant (e.g. administrative) control over the vulnerable component that could affect component-wide settings and files.')

    def defaultUI(self) -> None:
        """ Initialize default metric items for the 'User Interaction' metric.

        """
        if self.version == 3:
            self.data[0] = QtPtObjects.QMetricItem(QtPtCore.QtPt.NoneMetricValue, 'None', label='None', score=0.85, help='The vulnerable system can be exploited without interaction from any user.')
            self.data[1] = QtPtObjects.QMetricItem(QtPtCore.QtPt.RequiredMetricValue, 'Required', label='', score=0.62, help='Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited, such as convincing a user to click a link in an email.')

    def defaultS(self) -> None:
        """ Initialize default metric items for the 'Scope' metric.

        """
        if self.version == 3:
            self.data[0] = QtPtObjects.QMetricItem(QtPtCore.QtPt.UnchangedMetricValue, 'Unchanged', label='Unchanged', help='An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.')
            self.data[1] = QtPtObjects.QMetricItem(QtPtCore.QtPt.ChangedMetricValue, 'Changed', label='Changed', help='An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.')

    def defaultC(self) -> None:
        """ Initialize default metric items for the 'Confidentiality' metric.

        """
        if self.version == 3:
            self.data[0] = QtPtObjects.QMetricItem(QtPtCore.QtPt.NoneMetricValue, 'None', label='None', score=0.0, help='There is no loss of confidentiality within the impacted component.')
            self.data[1] = QtPtObjects.QMetricItem(QtPtCore.QtPt.LowMetricValue, 'Low', label='Low', score=0.22, help='There is some loss of confidentiality. Access to some restricted information is obtained, but the attacker does not have control over what information is obtained, or the amount or kind of loss is constrained. The information disclosure does not cause a direct, serious loss to the impacted component.')
            self.data[2] = QtPtObjects.QMetricItem(QtPtCore.QtPt.HighMetricValue, 'High', label='High', score=0.56, help='There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.')
        elif self.version == 2:
            self.data[0] = QtPtObjects.QMetricItem(QtPtCore.QtPt.NoneMetricValue, 'None', label='None', score=0.0, help='There is no impact to the confidentiality of the system.')
            self.data[1] = QtPtObjects.QMetricItem(QtPtCore.QtPt.PartialMetricValue, 'Partial', label='Partial', score=0.275, help='There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained. An example is a vulnerability that divulges only certain tables in a database.')
            self.data[2] = QtPtObjects.QMetricItem(QtPtCore.QtPt.CompleteMetricValue, 'Complete', label='Complete', score=0.66, help='There is total information disclosure, resulting in all system files being revealed. The attacker is able to read all of the system\'s data (memory, files, etc.).')

    def defaultI(self) -> None:
        """ Initialize default metric items for the 'Integrity' metric.

        """
        if self.version == 3:
            self.data[0] = QtPtObjects.QMetricItem(QtPtCore.QtPt.NoneMetricValue, 'None', label='None', score=0.0, help='There is no loss of integrity within the impacted component.')
            self.data[1] = QtPtObjects.QMetricItem(QtPtCore.QtPt.LowMetricValue, 'Low', label='Low', score=0.22, help='Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.')
            self.data[2] = QtPtObjects.QMetricItem(QtPtCore.QtPt.HighMetricValue, 'High', label='High', score=0.56, help='There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component. Alternatively, only some files can be modified, but malicious modification would present a direct, serious consequence to the impacted component.')
        elif self.version == 2:
            self.data[0] = QtPtObjects.QMetricItem(QtPtCore.QtPt.NoneMetricValue, 'None', label='None', score=0.0, help='There is no impact to the integrity of the system.')
            self.data[1] = QtPtObjects.QMetricItem(QtPtCore.QtPt.PartialMetricValue, 'Partial', label='Partial', score=0.275, help='Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited. For example, system or application files may be overwritten or modified, but either the attacker has no control over which files are affected or the attacker can modify files within only a limited context or scope.')
            self.data[2] = QtPtObjects.QMetricItem(QtPtCore.QtPt.CompleteMetricValue, 'Complete', label='Complete', score=0.66, help='There is a total compromise of system integrity. There is a complete loss of system protection, resulting in the entire system being compromised. The attacker is able to modify any files on the target system.')

    def defaultA(self) -> None:
        """ Initialize default metric items for the 'Availability' metric.

        """
        if self.version == 3:
            self.data[0] = QtPtObjects.QMetricItem(QtPtCore.QtPt.NoneMetricValue, 'None', label='None', score=0.0, help='There is no impact to availability within the impacted component.')
            self.data[1] = QtPtObjects.QMetricItem(QtPtCore.QtPt.LowMetricValue, 'Low', label='Low', score=0.22, help='There is reduced performance or interruptions in resource availability. Even if repeated exploitation of the vulnerability is possible, the attacker does not have the ability to completely deny service to legitimate users. The resources in the impacted component are either partially available all of the time, or fully available only some of the time, but overall there is no direct, serious consequence to the impacted component.')
            self.data[2] = QtPtObjects.QMetricItem(QtPtCore.QtPt.HighMetricValue, 'High', label='High', score=0.56, help='There is total loss of availability, resulting in the attacker being able to fully deny access to resources in the impacted component; this loss is either sustained (while the attacker continues to deliver the attack) or persistent (the condition persists even after the attack has completed). Alternatively, the attacker has the ability to deny some availability, but the loss of availability presents a direct, serious consequence to the impacted component (e.g., the attacker cannot disrupt existing connections, but can prevent new connections; the attacker can repeatedly exploit a vulnerability that, in each instance of a successful attack, leaks a only small amount of memory, but after repeated exploitation causes a service to become completely unavailable).')
        elif self.version == 2:
            self.data[0] = QtPtObjects.QMetricItem(QtPtCore.QtPt.NoneMetricValue, 'None', label='None', score=0.0, help='There is no impact to the availability of the system.')
            self.data[1] = QtPtObjects.QMetricItem(QtPtCore.QtPt.PartialMetricValue, 'Partial', label='Partial', score=0.275, help='There is reduced performance or interruptions in resource availability. An example is a network-based flood attack that permits a limited number of successful connections to an Internet service.')
            self.data[2] = QtPtObjects.QMetricItem(QtPtCore.QtPt.CompleteMetricValue, 'Complete', label='Complete', score=0.66, help='There is a total shutdown of the affected resource. The attacker can render the resource completely unavailable.')